!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.WHATWGFetch={})}(this,function(a){"use strict";var e,n,r="URLSearchParams"in self,o="Symbol"in self&&"iterator"in Symbol,c="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),i="FormData"in self,s="ArrayBuffer"in self;function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function l(t){return t="string"!=typeof t?String(t):t}function t(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return o&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach(function(t,e){this.append(e,t)},this):Array.isArray(e)?e.forEach(function(t){this.append(t[0],t[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(n){return new Promise(function(t,e){n.onload=function(){t(n.result)},n.onerror=function(){e(n.error)}})}function p(t){var e=new FileReader,n=h(e);return e.readAsArrayBuffer(t),n}function y(t){var e;return t.slice?t.slice(0):((e=new Uint8Array(t.byteLength)).set(new Uint8Array(t)),e.buffer)}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;(this._bodyInit=t)?"string"==typeof t?this._bodyText=t:c&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:i&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():s&&c&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):s&&(ArrayBuffer.prototype.isPrototypeOf(t)||n(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},c&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,e,n=f(this);if(n)return n;if(this._bodyBlob)return n=this._bodyBlob,t=new FileReader,e=h(t),t.readAsText(n),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},i&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}s&&(e=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],n=ArrayBuffer.isView||function(t){return t&&-1<e.indexOf(Object.prototype.toString.call(t))}),d.prototype.append=function(t,e){t=u(t),e=l(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},d.prototype.delete=function(t){delete this.map[u(t)]},d.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},d.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},d.prototype.set=function(t,e){this.map[u(t)]=l(e)},d.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},d.prototype.keys=function(){var n=[];return this.forEach(function(t,e){n.push(e)}),t(n)},d.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),t(e)},d.prototype.entries=function(){var n=[];return this.forEach(function(t,e){n.push([e,t])}),t(n)},o&&(d.prototype[Symbol.iterator]=d.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){var n,r=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new d(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(t=e.method||this.method||"GET",n=t.toUpperCase(),-1<b.indexOf(n)?n:t),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function v(t){var n=new FormData;return t.trim().split("&").forEach(function(t){var e;t&&(e=(t=t.split("=")).shift().replace(/\+/g," "),t=t.join("=").replace(/\+/g," "),n.append(decodeURIComponent(e),decodeURIComponent(t)))}),n}function g(t,e){e=e||{},this.type="default",this.status=void 0===e.status?200:e.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new d(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},m.call(w.prototype),m.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];g.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})},a.DOMException=self.DOMException;try{new a.DOMException}catch(t){a.DOMException=function(t,e){this.message=t,this.name=e;e=Error(t);this.stack=e.stack},a.DOMException.prototype=Object.create(Error.prototype),a.DOMException.prototype.constructor=a.DOMException}function E(i,s){return new Promise(function(r,t){var e=new w(i,s);if(e.signal&&e.signal.aborted)return t(new a.DOMException("Aborted","AbortError"));var o=new XMLHttpRequest;function n(){o.abort()}o.onload=function(){var n,t={status:o.status,statusText:o.statusText,headers:(t=o.getAllResponseHeaders()||"",n=new d,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var t=t.split(":"),e=t.shift().trim();e&&(t=t.join(":").trim(),n.append(e,t))}),n)},e=(t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL"),"response"in o?o.response:o.responseText);r(new g(e,t))},o.onerror=function(){t(new TypeError("Network request failed"))},o.ontimeout=function(){t(new TypeError("Network request failed"))},o.onabort=function(){t(new a.DOMException("Aborted","AbortError"))},o.open(e.method,e.url,!0),"include"===e.credentials?o.withCredentials=!0:"omit"===e.credentials&&(o.withCredentials=!1),"responseType"in o&&c&&(o.responseType="blob"),e.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),e.signal&&(e.signal.addEventListener("abort",n),o.onreadystatechange=function(){4===o.readyState&&e.signal.removeEventListener("abort",n)}),o.send(void 0===e._bodyInit?null:e._bodyInit)})}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=d,self.Request=w,self.Response=g),a.Headers=d,a.Request=w,a.Response=g,a.fetch=E,Object.defineProperty(a,"__esModule",{value:!0})}),function(t){("object"!=typeof exports||"undefined"==typeof module)&&"function"==typeof define&&define.amd?define(t):t()}(function(){"use strict";function t(e){var n=this.constructor;return this.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){return n.reject(t)})})}function e(n){return new this(function(o,t){if(!n||void 0===n.length)return t(new TypeError(typeof n+" "+n+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var i=Array.prototype.slice.call(n);if(0===i.length)return o([]);for(var s=i.length,e=0;i.length>e;e++)!function e(n,t){if(t&&("object"==typeof t||"function"==typeof t)){var r=t.then;if("function"==typeof r)return r.call(t,function(t){e(n,t)},function(t){i[n]={status:"rejected",reason:t},0==--s&&o(i)})}i[n]={status:"fulfilled",value:t},0==--s&&o(i)}(e,i[e])})}function c(t){return t&&void 0!==t.length}function n(){}function i(t){if(!(this instanceof i))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(t,this)}function o(n,r){for(;3===n._state;)n=n._value;0!==n._state?(n._handled=!0,i._immediateFn(function(){var t,e=1===n._state?r.onFulfilled:r.onRejected;if(null!==e){try{t=e(n._value)}catch(t){return void a(r.promise,t)}s(r.promise,t)}else(1===n._state?s:a)(r.promise,n._value)})):n._deferreds.push(r)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof i)return e._state=3,e._value=t,u(e);if("function"==typeof n)return l((r=n,o=t,function(){r.apply(o,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){a(e,t)}var r,o}function a(t,e){t._state=2,t._value=e,u(t)}function u(t){2===t._state&&0===t._deferreds.length&&i._immediateFn(function(){t._handled||i._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)o(t,t._deferreds[e]);t._deferreds=null}function l(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,a(e,t))})}catch(t){n||(n=!0,a(e,t))}}var r=setTimeout,d=(i.prototype.catch=function(t){return this.then(null,t)},i.prototype.then=function(r,t){var e=new this.constructor(n);return o(this,new function(t,e,n){this.onFulfilled="function"==typeof r?r:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(0,t,e)),e},i.prototype.finally=t,i.all=function(e){return new i(function(o,i){if(!c(e))return i(new TypeError("Promise.all accepts an array"));var s=Array.prototype.slice.call(e);if(0===s.length)return o([]);for(var a=s.length,t=0;s.length>t;t++)!function e(n,t){try{if(t&&("object"==typeof t||"function"==typeof t)){var r=t.then;if("function"==typeof r)return r.call(t,function(t){e(n,t)},i)}s[n]=t,0==--a&&o(s)}catch(t){i(t)}}(t,s[t])})},i.allSettled=e,i.resolve=function(e){return e&&"object"==typeof e&&e.constructor===i?e:new i(function(t){t(e)})},i.reject=function(n){return new i(function(t,e){e(n)})},i.race=function(o){return new i(function(t,e){if(!c(o))return e(new TypeError("Promise.race accepts an array"));for(var n=0,r=o.length;n<r;n++)i.resolve(o[n]).then(t,e)})},i._immediateFn="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){r(t,0)},i._unhandledRejectionFn=function(t){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw Error("unable to locate global object")}());"function"!=typeof d.Promise?d.Promise=i:(d.Promise.prototype.finally||(d.Promise.prototype.finally=t),d.Promise.allSettled||(d.Promise.allSettled=e))});const pokemonRepository=function(){const e=[],o=document.querySelector(".pokemon-list"),n=document.querySelector(".form-control");async function t(t){var e=t.detailsUrl;i();try{var n=await(await fetch(e)).json();t.height=n.height,t.frontImgUrl=n.sprites.front_default,t.backImgUrl=n.sprites.back_default;const r=[];n.types.forEach(function(t){r.push(t.type.name)}),t.types=r.join(", "),s()}catch(t){console.error(t),s()}}function r(t){"object"==typeof t&&Object.keys(t).includes("detailsUrl")?e.push(t):console.error("Pokémon has to be added using this format: {name:, detailsUrl:}")}function i(){var t=document.createElement("p");t.innerText="Loading...",t.classList.add("loading-message"),document.body.appendChild(t)}function s(){var t=document.querySelector(".loading-message");document.body.removeChild(t)}function a(n){return e.filter(function(t){var t=t.name.toLowerCase(),e=n.toLowerCase();return t.startsWith(e)})}function c(r){t(r).then(function(){var t=document.createElement("li"),e=(t.classList.add("list-items"),t.classList.add("group-list-item"),document.createElement("button")),n=(e.innerText=r.name,e.classList.add("button-class"),e.classList.add("btn"),e.setAttribute("data-toggle","modal"),e.setAttribute("data-target",".modal"),document.createElement("img"));n.src=r.frontImgUrl,n.classList.add("button-pokemonImg"),e.addEventListener("click",function(){u(r),$("#exampleModalCenter").modal("show")}),e.appendChild(n),t.appendChild(e),o.appendChild(t)})}function u(s){t(s).then(function(){var t=document.querySelector(".modal-body"),e=document.querySelector(".modal-title"),e=(t.innerHTML="",e.innerHTML="",e.innerText=s.name,e.classList.add("modal-title"),document.createElement("p")),n=(e.innerText="Height: "+s.height,e.classList.add("modal-height"),document.createElement("img")),r=(n.src=s.frontImgUrl,document.createElement("img")),o=(r.src=s.backImgUrl,n.classList.add("modal-img"),r.classList.add("modal-img"),document.createElement("div")),i=(o.classList.add("modal-text"),document.createElement("p"));i.innerText="Types: "+s.types,i.classList.add("modal-types"),t.appendChild(n),t.appendChild(r),t.appendChild(o),o.appendChild(e),o.appendChild(i)})}return n.addEventListener("input",function(){var t=a(n.ariaValueMax);removeList(),0===t.length?showErrorMessage("Sorry, there are no Pokemon matching your search criteria."):t.forEach(c)}),window.addEventListener("keydown",function(t){"Escape"===t.key&&modalContainer.classList.add("hidden")}),{loadList:async function(){i();try{(await(await fetch("https://pokeapi.co/api/v2/pokemon/?limit=150")).json()).results.forEach(function(t){r({name:t.name,detailsUrl:t.url})}),s()}catch(t){console.error(t),s()}},add:r,loadDetails:t,getAll:function(){return e},showDetails:u,addListItem:c,findPokemon:a}}();pokemonRepository.loadList().then(function(){pokemonRepository.getAll().forEach(function(t){pokemonRepository.addListItem(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,

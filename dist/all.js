!function(t,e){"object"==typeof exports&&"undefined"!=typeof module?e(exports):"function"==typeof define&&define.amd?define(["exports"],e):e(t.WHATWGFetch={})}(this,function(a){"use strict";var e,n,r="URLSearchParams"in self,o="Symbol"in self&&"iterator"in Symbol,c="FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(t){return!1}}(),i="FormData"in self,s="ArrayBuffer"in self;function u(t){if("string"!=typeof t&&(t=String(t)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(t))throw new TypeError("Invalid character in header field name");return t.toLowerCase()}function l(t){return t="string"!=typeof t?String(t):t}function t(e){var t={next:function(){var t=e.shift();return{done:void 0===t,value:t}}};return o&&(t[Symbol.iterator]=function(){return t}),t}function d(e){this.map={},e instanceof d?e.forEach(function(t,e){this.append(e,t)},this):Array.isArray(e)?e.forEach(function(t){this.append(t[0],t[1])},this):e&&Object.getOwnPropertyNames(e).forEach(function(t){this.append(t,e[t])},this)}function f(t){if(t.bodyUsed)return Promise.reject(new TypeError("Already read"));t.bodyUsed=!0}function h(n){return new Promise(function(t,e){n.onload=function(){t(n.result)},n.onerror=function(){e(n.error)}})}function p(t){var e=new FileReader,n=h(e);return e.readAsArrayBuffer(t),n}function y(t){var e;return t.slice?t.slice(0):((e=new Uint8Array(t.byteLength)).set(new Uint8Array(t)),e.buffer)}function m(){return this.bodyUsed=!1,this._initBody=function(t){var e;(this._bodyInit=t)?"string"==typeof t?this._bodyText=t:c&&Blob.prototype.isPrototypeOf(t)?this._bodyBlob=t:i&&FormData.prototype.isPrototypeOf(t)?this._bodyFormData=t:r&&URLSearchParams.prototype.isPrototypeOf(t)?this._bodyText=t.toString():s&&c&&(e=t)&&DataView.prototype.isPrototypeOf(e)?(this._bodyArrayBuffer=y(t.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):s&&(ArrayBuffer.prototype.isPrototypeOf(t)||n(t))?this._bodyArrayBuffer=y(t):this._bodyText=t=Object.prototype.toString.call(t):this._bodyText="",this.headers.get("content-type")||("string"==typeof t?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):r&&URLSearchParams.prototype.isPrototypeOf(t)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},c&&(this.blob=function(){var t=f(this);if(t)return t;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?f(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(p)}),this.text=function(){var t,e,n=f(this);if(n)return n;if(this._bodyBlob)return n=this._bodyBlob,t=new FileReader,e=h(t),t.readAsText(n),e;if(this._bodyArrayBuffer)return Promise.resolve(function(t){for(var e=new Uint8Array(t),n=new Array(e.length),r=0;r<e.length;r++)n[r]=String.fromCharCode(e[r]);return n.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},i&&(this.formData=function(){return this.text().then(v)}),this.json=function(){return this.text().then(JSON.parse)},this}s&&(e=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"],n=ArrayBuffer.isView||function(t){return t&&-1<e.indexOf(Object.prototype.toString.call(t))}),d.prototype.append=function(t,e){t=u(t),e=l(e);var n=this.map[t];this.map[t]=n?n+", "+e:e},d.prototype.delete=function(t){delete this.map[u(t)]},d.prototype.get=function(t){return t=u(t),this.has(t)?this.map[t]:null},d.prototype.has=function(t){return this.map.hasOwnProperty(u(t))},d.prototype.set=function(t,e){this.map[u(t)]=l(e)},d.prototype.forEach=function(t,e){for(var n in this.map)this.map.hasOwnProperty(n)&&t.call(e,this.map[n],n,this)},d.prototype.keys=function(){var n=[];return this.forEach(function(t,e){n.push(e)}),t(n)},d.prototype.values=function(){var e=[];return this.forEach(function(t){e.push(t)}),t(e)},d.prototype.entries=function(){var n=[];return this.forEach(function(t,e){n.push([e,t])}),t(n)},o&&(d.prototype[Symbol.iterator]=d.prototype.entries);var b=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function w(t,e){var n,r=(e=e||{}).body;if(t instanceof w){if(t.bodyUsed)throw new TypeError("Already read");this.url=t.url,this.credentials=t.credentials,e.headers||(this.headers=new d(t.headers)),this.method=t.method,this.mode=t.mode,this.signal=t.signal,r||null==t._bodyInit||(r=t._bodyInit,t.bodyUsed=!0)}else this.url=String(t);if(this.credentials=e.credentials||this.credentials||"same-origin",!e.headers&&this.headers||(this.headers=new d(e.headers)),this.method=(t=e.method||this.method||"GET",n=t.toUpperCase(),-1<b.indexOf(n)?n:t),this.mode=e.mode||this.mode||null,this.signal=e.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function v(t){var n=new FormData;return t.trim().split("&").forEach(function(t){var e;t&&(e=(t=t.split("=")).shift().replace(/\+/g," "),t=t.join("=").replace(/\+/g," "),n.append(decodeURIComponent(e),decodeURIComponent(t)))}),n}function g(t,e){e=e||{},this.type="default",this.status=void 0===e.status?200:e.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in e?e.statusText:"OK",this.headers=new d(e.headers),this.url=e.url||"",this._initBody(t)}w.prototype.clone=function(){return new w(this,{body:this._bodyInit})},m.call(w.prototype),m.call(g.prototype),g.prototype.clone=function(){return new g(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new d(this.headers),url:this.url})},g.error=function(){var t=new g(null,{status:0,statusText:""});return t.type="error",t};var _=[301,302,303,307,308];g.redirect=function(t,e){if(-1===_.indexOf(e))throw new RangeError("Invalid status code");return new g(null,{status:e,headers:{location:t}})},a.DOMException=self.DOMException;try{new a.DOMException}catch(t){a.DOMException=function(t,e){this.message=t,this.name=e;e=Error(t);this.stack=e.stack},a.DOMException.prototype=Object.create(Error.prototype),a.DOMException.prototype.constructor=a.DOMException}function E(i,s){return new Promise(function(r,t){var e=new w(i,s);if(e.signal&&e.signal.aborted)return t(new a.DOMException("Aborted","AbortError"));var o=new XMLHttpRequest;function n(){o.abort()}o.onload=function(){var n,t={status:o.status,statusText:o.statusText,headers:(t=o.getAllResponseHeaders()||"",n=new d,t.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(function(t){var t=t.split(":"),e=t.shift().trim();e&&(t=t.join(":").trim(),n.append(e,t))}),n)},e=(t.url="responseURL"in o?o.responseURL:t.headers.get("X-Request-URL"),"response"in o?o.response:o.responseText);r(new g(e,t))},o.onerror=function(){t(new TypeError("Network request failed"))},o.ontimeout=function(){t(new TypeError("Network request failed"))},o.onabort=function(){t(new a.DOMException("Aborted","AbortError"))},o.open(e.method,e.url,!0),"include"===e.credentials?o.withCredentials=!0:"omit"===e.credentials&&(o.withCredentials=!1),"responseType"in o&&c&&(o.responseType="blob"),e.headers.forEach(function(t,e){o.setRequestHeader(e,t)}),e.signal&&(e.signal.addEventListener("abort",n),o.onreadystatechange=function(){4===o.readyState&&e.signal.removeEventListener("abort",n)}),o.send(void 0===e._bodyInit?null:e._bodyInit)})}E.polyfill=!0,self.fetch||(self.fetch=E,self.Headers=d,self.Request=w,self.Response=g),a.Headers=d,a.Request=w,a.Response=g,a.fetch=E,Object.defineProperty(a,"__esModule",{value:!0})}),function(t){("object"!=typeof exports||"undefined"==typeof module)&&"function"==typeof define&&define.amd?define(t):t()}(function(){"use strict";function t(e){var n=this.constructor;return this.then(function(t){return n.resolve(e()).then(function(){return t})},function(t){return n.resolve(e()).then(function(){return n.reject(t)})})}function e(n){return new this(function(o,t){if(!n||void 0===n.length)return t(new TypeError(typeof n+" "+n+" is not iterable(cannot read property Symbol(Symbol.iterator))"));var i=Array.prototype.slice.call(n);if(0===i.length)return o([]);for(var s=i.length,e=0;i.length>e;e++)!function e(n,t){if(t&&("object"==typeof t||"function"==typeof t)){var r=t.then;if("function"==typeof r)return r.call(t,function(t){e(n,t)},function(t){i[n]={status:"rejected",reason:t},0==--s&&o(i)})}i[n]={status:"fulfilled",value:t},0==--s&&o(i)}(e,i[e])})}function c(t){return t&&void 0!==t.length}function n(){}function i(t){if(!(this instanceof i))throw new TypeError("Promises must be constructed via new");if("function"!=typeof t)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],l(t,this)}function o(n,r){for(;3===n._state;)n=n._value;0!==n._state?(n._handled=!0,i._immediateFn(function(){var t,e=1===n._state?r.onFulfilled:r.onRejected;if(null!==e){try{t=e(n._value)}catch(t){return void a(r.promise,t)}s(r.promise,t)}else(1===n._state?s:a)(r.promise,n._value)})):n._deferreds.push(r)}function s(e,t){try{if(t===e)throw new TypeError("A promise cannot be resolved with itself.");if(t&&("object"==typeof t||"function"==typeof t)){var n=t.then;if(t instanceof i)return e._state=3,e._value=t,u(e);if("function"==typeof n)return l((r=n,o=t,function(){r.apply(o,arguments)}),e)}e._state=1,e._value=t,u(e)}catch(t){a(e,t)}var r,o}function a(t,e){t._state=2,t._value=e,u(t)}function u(t){2===t._state&&0===t._deferreds.length&&i._immediateFn(function(){t._handled||i._unhandledRejectionFn(t._value)});for(var e=0,n=t._deferreds.length;e<n;e++)o(t,t._deferreds[e]);t._deferreds=null}function l(t,e){var n=!1;try{t(function(t){n||(n=!0,s(e,t))},function(t){n||(n=!0,a(e,t))})}catch(t){n||(n=!0,a(e,t))}}var r=setTimeout,d=(i.prototype.catch=function(t){return this.then(null,t)},i.prototype.then=function(r,t){var e=new this.constructor(n);return o(this,new function(t,e,n){this.onFulfilled="function"==typeof r?r:null,this.onRejected="function"==typeof e?e:null,this.promise=n}(0,t,e)),e},i.prototype.finally=t,i.all=function(e){return new i(function(o,i){if(!c(e))return i(new TypeError("Promise.all accepts an array"));var s=Array.prototype.slice.call(e);if(0===s.length)return o([]);for(var a=s.length,t=0;s.length>t;t++)!function e(n,t){try{if(t&&("object"==typeof t||"function"==typeof t)){var r=t.then;if("function"==typeof r)return r.call(t,function(t){e(n,t)},i)}s[n]=t,0==--a&&o(s)}catch(t){i(t)}}(t,s[t])})},i.allSettled=e,i.resolve=function(e){return e&&"object"==typeof e&&e.constructor===i?e:new i(function(t){t(e)})},i.reject=function(n){return new i(function(t,e){e(n)})},i.race=function(o){return new i(function(t,e){if(!c(o))return e(new TypeError("Promise.race accepts an array"));for(var n=0,r=o.length;n<r;n++)i.resolve(o[n]).then(t,e)})},i._immediateFn="function"==typeof setImmediate?function(t){setImmediate(t)}:function(t){r(t,0)},i._unhandledRejectionFn=function(t){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",t)},function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw Error("unable to locate global object")}());"function"!=typeof d.Promise?d.Promise=i:(d.Promise.prototype.finally||(d.Promise.prototype.finally=t),d.Promise.allSettled||(d.Promise.allSettled=e))});const pokemonRepository=function(){const n=[],o=document.querySelector(".pokemon-list"),r=document.querySelector(".form-control");async function t(t){var e=t.detailsUrl;i();try{var n=await(await fetch(e)).json();t.height=n.height,t.frontImgUrl=n.sprites.front_default,t.backImgUrl=n.sprites.back_default;const r=[];n.types.forEach(function(t){r.push(t.type.name)}),t.types=r.join(", "),s()}catch(t){console.error(t),s()}}function e(t){"object"==typeof t&&Object.keys(t).includes("detailsUrl")?n.push(t):console.error("Pokémon has to be added using this format: {name:, detailsUrl:}")}function i(){var t=document.createElement("p");t.innerText="Loading...",t.classList.add("loading-message"),document.body.appendChild(t)}function s(){var t=document.querySelector(".loading-message");document.body.removeChild(t)}function a(r){t(r).then(function(){var t=document.createElement("li"),e=(t.classList.add("list-items"),t.classList.add("group-list-item"),document.createElement("button")),n=(e.innerText=r.name,e.classList.add("button-class"),e.classList.add("btn"),e.setAttribute("data-toggle","modal"),e.setAttribute("data-target",".modal"),document.createElement("img"));n.src=r.frontImgUrl,n.classList.add("button-pokemonImg"),e.addEventListener("click",function(){c(r),$("#exampleModalCenter").modal("show")}),e.appendChild(n),t.appendChild(e),o.appendChild(t)})}function c(s){t(s).then(function(){var t=document.querySelector(".modal-body"),e=document.querySelector(".modal-title"),e=(t.innerHTML="",e.innerHTML="",e.innerText=s.name,e.classList.add("modal-title"),document.createElement("p")),n=(e.innerText="Height: "+s.height,e.classList.add("modal-height"),document.createElement("img")),r=(n.src=s.frontImgUrl,document.createElement("img")),o=(r.src=s.backImgUrl,n.classList.add("modal-img"),r.classList.add("modal-img"),document.createElement("div")),i=(o.classList.add("modal-text"),document.createElement("p"));i.innerText="Types: "+s.types,i.classList.add("modal-types"),t.appendChild(n),t.appendChild(r),t.appendChild(o),o.appendChild(e),o.appendChild(i)})}return r.addEventListener("input",function(){const e=r.value.toLowerCase();var t=n.filter(t=>t.name.toLowerCase().includes(e));o.innerHTML="",t.forEach(t=>a(t))}),window.addEventListener("keydown",function(t){"Escape"===t.key&&modalContainer.classList.add("hidden")}),{loadList:async function(){i();try{(await(await fetch("https://pokeapi.co/api/v2/pokemon/?limit=150")).json()).results.forEach(function(t){e({name:t.name,detailsUrl:t.url})}),s()}catch(t){console.error(t),s()}},add:e,loadDetails:t,getAll:function(){return n},showDetails:c,addListItem:a}}();pokemonRepository.loadList().then(function(){pokemonRepository.getAll().forEach(function(t){pokemonRepository.addListItem(t)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZldGNoLXBvbHlmaWxsLmpzIiwicHJvbWlzZS1wb2x5ZmlsbC5qcyIsInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJXSEFUV0dGZXRjaCIsInRoaXMiLCJ2aWV3Q2xhc3NlcyIsImlzQXJyYXlCdWZmZXJWaWV3Iiwic3VwcG9ydCIsInNlbGYiLCJTeW1ib2wiLCJCbG9iIiwiZSIsIm5vcm1hbGl6ZU5hbWUiLCJuYW1lIiwiU3RyaW5nIiwidGVzdCIsIlR5cGVFcnJvciIsInRvTG93ZXJDYXNlIiwibm9ybWFsaXplVmFsdWUiLCJ2YWx1ZSIsIml0ZXJhdG9yRm9yIiwiaXRlbXMiLCJpdGVyYXRvciIsIm5leHQiLCJzaGlmdCIsImRvbmUiLCJ1bmRlZmluZWQiLCJIZWFkZXJzIiwiaGVhZGVycyIsIm1hcCIsImZvckVhY2giLCJhcHBlbmQiLCJBcnJheSIsImlzQXJyYXkiLCJoZWFkZXIiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiY29uc3VtZWQiLCJib2R5IiwiYm9keVVzZWQiLCJQcm9taXNlIiwicmVqZWN0IiwiZmlsZVJlYWRlclJlYWR5IiwicmVhZGVyIiwicmVzb2x2ZSIsIm9ubG9hZCIsInJlc3VsdCIsIm9uZXJyb3IiLCJlcnJvciIsInJlYWRCbG9iQXNBcnJheUJ1ZmZlciIsImJsb2IiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3Iiwic2xpY2UiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInNldCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJvYmoiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJwcm90b3R5cGUiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwidG9TdHJpbmciLCJEYXRhVmlldyIsIl9ib2R5QXJyYXlCdWZmZXIiLCJBcnJheUJ1ZmZlciIsImNhbGwiLCJnZXQiLCJ0eXBlIiwicmVqZWN0ZWQiLCJFcnJvciIsImFycmF5QnVmZmVyIiwidGhlbiIsInRleHQiLCJyZWFkQXNUZXh0IiwiY2hhcnMiLCJsZW5ndGgiLCJpIiwiZnJvbUNoYXJDb2RlIiwiam9pbiIsImZvcm1EYXRhIiwiZGVjb2RlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsImlzVmlldyIsImluZGV4T2YiLCJvbGRWYWx1ZSIsImhhcyIsImhhc093blByb3BlcnR5IiwiY2FsbGJhY2siLCJ0aGlzQXJnIiwia2V5cyIsInB1c2giLCJ2YWx1ZXMiLCJlbnRyaWVzIiwibWV0aG9kcyIsIlJlcXVlc3QiLCJpbnB1dCIsIm9wdGlvbnMiLCJ1cGNhc2VkIiwidXJsIiwiY3JlZGVudGlhbHMiLCJtZXRob2QiLCJtb2RlIiwic2lnbmFsIiwidG9VcHBlckNhc2UiLCJyZWZlcnJlciIsImZvcm0iLCJ0cmltIiwic3BsaXQiLCJieXRlcyIsInJlcGxhY2UiLCJkZWNvZGVVUklDb21wb25lbnQiLCJSZXNwb25zZSIsImJvZHlJbml0Iiwic3RhdHVzIiwib2siLCJzdGF0dXNUZXh0IiwiY2xvbmUiLCJyZXNwb25zZSIsInJlZGlyZWN0U3RhdHVzZXMiLCJyZWRpcmVjdCIsIlJhbmdlRXJyb3IiLCJsb2NhdGlvbiIsIkRPTUV4Y2VwdGlvbiIsImVyciIsIm1lc3NhZ2UiLCJzdGFjayIsImNyZWF0ZSIsImNvbnN0cnVjdG9yIiwiZmV0Y2giLCJpbml0IiwicmVxdWVzdCIsImFib3J0ZWQiLCJ4aHIiLCJYTUxIdHRwUmVxdWVzdCIsImFib3J0WGhyIiwiYWJvcnQiLCJyYXdIZWFkZXJzIiwiZ2V0QWxsUmVzcG9uc2VIZWFkZXJzIiwibGluZSIsInBhcnRzIiwia2V5IiwicmVzcG9uc2VVUkwiLCJyZXNwb25zZVRleHQiLCJvbnRpbWVvdXQiLCJvbmFib3J0Iiwib3BlbiIsIndpdGhDcmVkZW50aWFscyIsInJlc3BvbnNlVHlwZSIsInNldFJlcXVlc3RIZWFkZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJzZW5kIiwicG9seWZpbGwiLCJkZWZpbmVQcm9wZXJ0eSIsInQiLCJuIiwiciIsImYiLCJvIiwicmVhc29uIiwiX3N0YXRlIiwiX2hhbmRsZWQiLCJfdmFsdWUiLCJfZGVmZXJyZWRzIiwibCIsIl9pbW1lZGlhdGVGbiIsIm9uRnVsZmlsbGVkIiwib25SZWplY3RlZCIsInUiLCJjIiwiYXBwbHkiLCJhcmd1bWVudHMiLCJfdW5oYW5kbGVkUmVqZWN0aW9uRm4iLCJhIiwic2V0VGltZW91dCIsInMiLCJhbGwiLCJhbGxTZXR0bGVkIiwicmFjZSIsInNldEltbWVkaWF0ZSIsImNvbnNvbGUiLCJ3YXJuIiwid2luZG93IiwicG9rZW1vblJlcG9zaXRvcnkiLCJwb2tlbW9uTGlzdCIsImxpc3RQb2tlbW9uIiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwiaW5wdXRGaWVsZCIsImFzeW5jIiwibG9hZERldGFpbHMiLCJwb2tlbW9uIiwiZGV0YWlsc1VybCIsInNob3dMb2FkaW5nTWVzc2FnZSIsImRldGFpbHMiLCJhd2FpdCIsImhlaWdodCIsImZyb250SW1nVXJsIiwic3ByaXRlcyIsImZyb250X2RlZmF1bHQiLCJiYWNrSW1nVXJsIiwiYmFja19kZWZhdWx0IiwicG9rZW1vblR5cGVzIiwidHlwZXMiLCJpdGVtIiwiaGlkZUxvYWRpbmdNZXNzYWdlIiwiYWRkIiwiaW5jbHVkZXMiLCJsb2FkaW5nTWVzc2FnZSIsImNyZWF0ZUVsZW1lbnQiLCJpbm5lclRleHQiLCJjbGFzc0xpc3QiLCJhcHBlbmRDaGlsZCIsInJlbW92ZUNoaWxkIiwiYWRkTGlzdEl0ZW0iLCJsaXN0SXRlbXMiLCJidXR0b24iLCJwb2tlbW9uSW1nIiwic2V0QXR0cmlidXRlIiwic3JjIiwic2hvd0RldGFpbHMiLCIkIiwibW9kYWwiLCJtb2RhbEJvZHkiLCJtb2RhbFRpdGxlIiwiaW5uZXJIVE1MIiwiZnJvbnRJbWciLCJiYWNrSW1nIiwibW9kYWxUZXh0Iiwic2VhcmNoVmFsdWUiLCJmaWx0ZXJlZFBva2Vtb24iLCJmaWx0ZXIiLCJldmVudCIsIm1vZGFsQ29udGFpbmVyIiwibG9hZExpc3QiLCJyZXN1bHRzIiwiZ2V0QWxsIl0sIm1hcHBpbmdzIjoiQUFBQSxDQUFBLFNBQUFBLEVBQUFDLEdBQ0EsVUFBQSxPQUFBQyxTQUFBLGFBQUEsT0FBQUMsT0FBQUYsRUFBQUMsT0FBQSxFQUNBLFlBQUEsT0FBQUUsUUFBQUEsT0FBQUMsSUFBQUQsT0FBQSxDQUFBLFdBQUFILENBQUEsRUFDQUEsRUFBQUQsRUFBQU0sWUFBQSxFQUFBLENBQ0EsRUFBQUMsS0FBQSxTQUFBTCxHQUFBLGFBRUEsSUF1QkFNLEVBWUFDLEVBbkNBQyxFQUNBLG9CQUFBQyxLQURBRCxFQUVBLFdBQUFDLE1BQUEsYUFBQUMsT0FGQUYsRUFJQSxlQUFBQyxNQUNBLFNBQUFBLE1BQ0EsV0FDQSxJQUVBLE9BREEsSUFBQUUsS0FDQSxDQUFBLENBR0EsQ0FGQSxNQUFBQyxHQUNBLE1BQUEsQ0FBQSxDQUNBLENBQ0EsRUFBQSxFQWJBSixFQWNBLGFBQUFDLEtBZEFELEVBZUEsZ0JBQUFDLEtBMkJBLFNBQUFJLEVBQUFDLEdBSUEsR0FIQSxVQUFBLE9BQUFBLElBQ0FBLEVBQUFDLE9BQUFELENBQUEsR0FFQSw0QkFBQUUsS0FBQUYsQ0FBQSxFQUNBLE1BQUEsSUFBQUcsVUFBQSx3Q0FBQSxFQUVBLE9BQUFILEVBQUFJLFlBQUEsQ0FDQSxDQUVBLFNBQUFDLEVBQUFDLEdBSUEsT0FGQUEsRUFEQSxVQUFBLE9BQUFBLEVBQ0FMLE9BQUFLLENBQUEsRUFFQUEsQ0FDQSxDQUdBLFNBQUFDLEVBQUFDLEdBQ0EsSUFBQUMsRUFBQSxDQUNBQyxLQUFBLFdBQ0EsSUFBQUosRUFBQUUsRUFBQUcsTUFBQSxFQUNBLE1BQUEsQ0FBQUMsS0FBQUMsS0FBQUEsSUFBQVAsRUFBQUEsTUFBQUEsQ0FB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UUFBQTdOLFFBQUEsU0FBQThMLEdBS0FFLEVBSkEsQ0FDQWpOLEtBQUErTSxFQUFBL00sS0FDQW1NLFdBQUFZLEVBQUE1RyxHQUNBLENBQ0EsQ0FDQSxDQUFBLEVBQ0E2RyxFQUFBLENBSUEsQ0FIQSxNQUFBbE4sR0FDQXlMLFFBQUFwSixNQUFBckMsQ0FBQSxFQUNBa04sRUFBQSxDQUNBLENBQ0EsRUF3SUFDLElBQUFBLEVBQ0FoQixZQUFBQSxFQUNBOEMsT0FuRkEsV0FDQSxPQUFBcEQsQ0FDQSxFQWtGQW9DLFlBQUFBLEVBQ0FOLFlBQUFBLENBQ0EsQ0FDQSxFQUFBLEVBR0EvQixrQkFBQW1ELFNBQUEsRUFBQXZLLEtBQUEsV0FDQW9ILGtCQUFBcUQsT0FBQSxFQUNBOU4sUUFBQSxTQUFBaUwsR0FDQVIsa0JBQUErQixZQUFBdkIsQ0FBQSxDQUNBLENBQUEsQ0FDQSxDQUFBIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XHJcbiAgICB0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcgJiYgdHlwZW9mIG1vZHVsZSAhPT0gJ3VuZGVmaW5lZCcgPyBmYWN0b3J5KGV4cG9ydHMpIDpcclxuICAgIHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCA/IGRlZmluZShbJ2V4cG9ydHMnXSwgZmFjdG9yeSkgOlxyXG4gICAgKGZhY3RvcnkoKGdsb2JhbC5XSEFUV0dGZXRjaCA9IHt9KSkpO1xyXG4gIH0odGhpcywgKGZ1bmN0aW9uIChleHBvcnRzKSB7ICd1c2Ugc3RyaWN0JztcclxuICBcclxuICAgIHZhciBzdXBwb3J0ID0ge1xyXG4gICAgICBzZWFyY2hQYXJhbXM6ICdVUkxTZWFyY2hQYXJhbXMnIGluIHNlbGYsXHJcbiAgICAgIGl0ZXJhYmxlOiAnU3ltYm9sJyBpbiBzZWxmICYmICdpdGVyYXRvcicgaW4gU3ltYm9sLFxyXG4gICAgICBibG9iOlxyXG4gICAgICAgICdGaWxlUmVhZGVyJyBpbiBzZWxmICYmXHJcbiAgICAgICAgJ0Jsb2InIGluIHNlbGYgJiZcclxuICAgICAgICAoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBuZXcgQmxvYigpO1xyXG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxyXG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KSgpLFxyXG4gICAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxyXG4gICAgICBhcnJheUJ1ZmZlcjogJ0FycmF5QnVmZmVyJyBpbiBzZWxmXHJcbiAgICB9O1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcclxuICAgICAgcmV0dXJuIG9iaiAmJiBEYXRhVmlldy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihvYmopXHJcbiAgICB9XHJcbiAgXHJcbiAgICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xyXG4gICAgICB2YXIgdmlld0NsYXNzZXMgPSBbXHJcbiAgICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXHJcbiAgICAgICAgJ1tvYmplY3QgVWludDhBcnJheV0nLFxyXG4gICAgICAgICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXHJcbiAgICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxyXG4gICAgICAgICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXHJcbiAgICAgICAgJ1tvYmplY3QgSW50MzJBcnJheV0nLFxyXG4gICAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXHJcbiAgICAgICAgJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXHJcbiAgICAgICAgJ1tvYmplY3QgRmxvYXQ2NEFycmF5XSdcclxuICAgICAgXTtcclxuICBcclxuICAgICAgdmFyIGlzQXJyYXlCdWZmZXJWaWV3ID1cclxuICAgICAgICBBcnJheUJ1ZmZlci5pc1ZpZXcgfHxcclxuICAgICAgICBmdW5jdGlvbihvYmopIHtcclxuICAgICAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMVxyXG4gICAgICAgIH07XHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemVOYW1lKG5hbWUpIHtcclxuICAgICAgaWYgKHR5cGVvZiBuYW1lICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKC9bXmEtejAtOVxcLSMkJSYnKisuXl9gfH5dL2kudGVzdChuYW1lKSkge1xyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJylcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gbmFtZS50b0xvd2VyQ2FzZSgpXHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xyXG4gICAgICBpZiAodHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykge1xyXG4gICAgICAgIHZhbHVlID0gU3RyaW5nKHZhbHVlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gdmFsdWVcclxuICAgIH1cclxuICBcclxuICAgIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XHJcbiAgICBmdW5jdGlvbiBpdGVyYXRvckZvcihpdGVtcykge1xyXG4gICAgICB2YXIgaXRlcmF0b3IgPSB7XHJcbiAgICAgICAgbmV4dDogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgdmFsdWUgPSBpdGVtcy5zaGlmdCgpO1xyXG4gICAgICAgICAgcmV0dXJuIHtkb25lOiB2YWx1ZSA9PT0gdW5kZWZpbmVkLCB2YWx1ZTogdmFsdWV9XHJcbiAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gIFxyXG4gICAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xyXG4gICAgICAgIGl0ZXJhdG9yW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHJldHVybiBpdGVyYXRvclxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgcmV0dXJuIGl0ZXJhdG9yXHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcclxuICAgICAgdGhpcy5tYXAgPSB7fTtcclxuICBcclxuICAgICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XHJcbiAgICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCB2YWx1ZSk7XHJcbiAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xyXG4gICAgICAgIGhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbihoZWFkZXIpIHtcclxuICAgICAgICAgIHRoaXMuYXBwZW5kKGhlYWRlclswXSwgaGVhZGVyWzFdKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XHJcbiAgICAgICAgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoaGVhZGVycykuZm9yRWFjaChmdW5jdGlvbihuYW1lKSB7XHJcbiAgICAgICAgICB0aGlzLmFwcGVuZChuYW1lLCBoZWFkZXJzW25hbWVdKTtcclxuICAgICAgICB9LCB0aGlzKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIFxyXG4gICAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24obmFtZSwgdmFsdWUpIHtcclxuICAgICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSk7XHJcbiAgICAgIHZhbHVlID0gbm9ybWFsaXplVmFsdWUodmFsdWUpO1xyXG4gICAgICB2YXIgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXTtcclxuICAgICAgdGhpcy5tYXBbbmFtZV0gPSBvbGRWYWx1ZSA/IG9sZFZhbHVlICsgJywgJyArIHZhbHVlIDogdmFsdWU7XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgSGVhZGVycy5wcm90b3R5cGVbJ2RlbGV0ZSddID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICBkZWxldGUgdGhpcy5tYXBbbm9ybWFsaXplTmFtZShuYW1lKV07XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgSGVhZGVycy5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICBuYW1lID0gbm9ybWFsaXplTmFtZShuYW1lKTtcclxuICAgICAgcmV0dXJuIHRoaXMuaGFzKG5hbWUpID8gdGhpcy5tYXBbbmFtZV0gOiBudWxsXHJcbiAgICB9O1xyXG4gIFxyXG4gICAgSGVhZGVycy5wcm90b3R5cGUuaGFzID0gZnVuY3Rpb24obmFtZSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5tYXAuaGFzT3duUHJvcGVydHkobm9ybWFsaXplTmFtZShuYW1lKSlcclxuICAgIH07XHJcbiAgXHJcbiAgICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbihuYW1lLCB2YWx1ZSkge1xyXG4gICAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcclxuICAgIH07XHJcbiAgXHJcbiAgICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24oY2FsbGJhY2ssIHRoaXNBcmcpIHtcclxuICAgICAgZm9yICh2YXIgbmFtZSBpbiB0aGlzLm1hcCkge1xyXG4gICAgICAgIGlmICh0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShuYW1lKSkge1xyXG4gICAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIFxyXG4gICAgSGVhZGVycy5wcm90b3R5cGUua2V5cyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICB2YXIgaXRlbXMgPSBbXTtcclxuICAgICAgdGhpcy5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlLCBuYW1lKSB7XHJcbiAgICAgICAgaXRlbXMucHVzaChuYW1lKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcylcclxuICAgIH07XHJcbiAgXHJcbiAgICBIZWFkZXJzLnByb3RvdHlwZS52YWx1ZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGl0ZW1zID0gW107XHJcbiAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSkge1xyXG4gICAgICAgIGl0ZW1zLnB1c2godmFsdWUpO1xyXG4gICAgICB9KTtcclxuICAgICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKVxyXG4gICAgfTtcclxuICBcclxuICAgIEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXMgPSBmdW5jdGlvbigpIHtcclxuICAgICAgdmFyIGl0ZW1zID0gW107XHJcbiAgICAgIHRoaXMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xyXG4gICAgICAgIGl0ZW1zLnB1c2goW25hbWUsIHZhbHVlXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpXHJcbiAgICB9O1xyXG4gIFxyXG4gICAgaWYgKHN1cHBvcnQuaXRlcmFibGUpIHtcclxuICAgICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XHJcbiAgICAgIGlmIChib2R5LmJvZHlVc2VkKSB7XHJcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpKVxyXG4gICAgICB9XHJcbiAgICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xyXG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmVzb2x2ZShyZWFkZXIucmVzdWx0KTtcclxuICAgICAgICB9O1xyXG4gICAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKTtcclxuICAgICAgICB9O1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIFxyXG4gICAgZnVuY3Rpb24gcmVhZEJsb2JBc0FycmF5QnVmZmVyKGJsb2IpIHtcclxuICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XHJcbiAgICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcclxuICAgICAgcmV0dXJuIHByb21pc2VcclxuICAgIH1cclxuICBcclxuICAgIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcclxuICAgICAgdmFyIHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XHJcbiAgICAgIHZhciBwcm9taXNlID0gZmlsZVJlYWRlclJlYWR5KHJlYWRlcik7XHJcbiAgICAgIHJlYWRlci5yZWFkQXNUZXh0KGJsb2IpO1xyXG4gICAgICByZXR1cm4gcHJvbWlzZVxyXG4gICAgfVxyXG4gIFxyXG4gICAgZnVuY3Rpb24gcmVhZEFycmF5QnVmZmVyQXNUZXh0KGJ1Zikge1xyXG4gICAgICB2YXIgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zik7XHJcbiAgICAgIHZhciBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aCk7XHJcbiAgXHJcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdmlldy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gY2hhcnMuam9pbignJylcclxuICAgIH1cclxuICBcclxuICAgIGZ1bmN0aW9uIGJ1ZmZlckNsb25lKGJ1Zikge1xyXG4gICAgICBpZiAoYnVmLnNsaWNlKSB7XHJcbiAgICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHZhciB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmLmJ5dGVMZW5ndGgpO1xyXG4gICAgICAgIHZpZXcuc2V0KG5ldyBVaW50OEFycmF5KGJ1ZikpO1xyXG4gICAgICAgIHJldHVybiB2aWV3LmJ1ZmZlclxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBCb2R5KCkge1xyXG4gICAgICB0aGlzLmJvZHlVc2VkID0gZmFsc2U7XHJcbiAgXHJcbiAgICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24oYm9keSkge1xyXG4gICAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keTtcclxuICAgICAgICBpZiAoIWJvZHkpIHtcclxuICAgICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gJyc7XHJcbiAgICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcclxuICAgICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keTtcclxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYmxvYiAmJiBCbG9iLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XHJcbiAgICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmZvcm1EYXRhICYmIEZvcm1EYXRhLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XHJcbiAgICAgICAgICB0aGlzLl9ib2R5Rm9ybURhdGEgPSBib2R5O1xyXG4gICAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XHJcbiAgICAgICAgICB0aGlzLl9ib2R5VGV4dCA9IGJvZHkudG9TdHJpbmcoKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgc3VwcG9ydC5ibG9iICYmIGlzRGF0YVZpZXcoYm9keSkpIHtcclxuICAgICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKTtcclxuICAgICAgICAgIC8vIElFIDEwLTExIGNhbid0IGhhbmRsZSBhIERhdGFWaWV3IGJvZHkuXHJcbiAgICAgICAgICB0aGlzLl9ib2R5SW5pdCA9IG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKTtcclxuICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xyXG4gICAgICAgICAgdGhpcy5fYm9keUFycmF5QnVmZmVyID0gYnVmZmVyQ2xvbmUoYm9keSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KTtcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xyXG4gICAgICAgICAgaWYgKHR5cGVvZiBib2R5ID09PSAnc3RyaW5nJykge1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAndGV4dC9wbGFpbjtjaGFyc2V0PVVURi04Jyk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcclxuICAgICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgdGhpcy5fYm9keUJsb2IudHlwZSk7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuc2VhcmNoUGFyYW1zICYmIFVSTFNlYXJjaFBhcmFtcy5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xyXG4gICAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgXHJcbiAgICAgIGlmIChzdXBwb3J0LmJsb2IpIHtcclxuICAgICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbigpIHtcclxuICAgICAgICAgIHZhciByZWplY3RlZCA9IGNvbnN1bWVkKHRoaXMpO1xyXG4gICAgICAgICAgaWYgKHJlamVjdGVkKSB7XHJcbiAgICAgICAgICAgIHJldHVybiByZWplY3RlZFxyXG4gICAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpXHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikge1xyXG4gICAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSlcclxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XHJcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJylcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobmV3IEJsb2IoW3RoaXMuX2JvZHlUZXh0XSkpXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICB0aGlzLmFycmF5QnVmZmVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBjb25zdW1lZCh0aGlzKSB8fCBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUFycmF5QnVmZmVyKVxyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgdmFyIHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XHJcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0ZWRcclxuICAgICAgICB9XHJcbiAgXHJcbiAgICAgICAgaWYgKHRoaXMuX2JvZHlCbG9iKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcclxuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpXHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLl9ib2R5Rm9ybURhdGEpIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0JylcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSh0aGlzLl9ib2R5VGV4dClcclxuICAgICAgICB9XHJcbiAgICAgIH07XHJcbiAgXHJcbiAgICAgIGlmIChzdXBwb3J0LmZvcm1EYXRhKSB7XHJcbiAgICAgICAgdGhpcy5mb3JtRGF0YSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oZGVjb2RlKVxyXG4gICAgICAgIH07XHJcbiAgICAgIH1cclxuICBcclxuICAgICAgdGhpcy5qc29uID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMudGV4dCgpLnRoZW4oSlNPTi5wYXJzZSlcclxuICAgICAgfTtcclxuICBcclxuICAgICAgcmV0dXJuIHRoaXNcclxuICAgIH1cclxuICBcclxuICAgIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxyXG4gICAgdmFyIG1ldGhvZHMgPSBbJ0RFTEVURScsICdHRVQnLCAnSEVBRCcsICdPUFRJT05TJywgJ1BPU1QnLCAnUFVUJ107XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBub3JtYWxpemVNZXRob2QobWV0aG9kKSB7XHJcbiAgICAgIHZhciB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XHJcbiAgICAgIHJldHVybiBtZXRob2RzLmluZGV4T2YodXBjYXNlZCkgPiAtMSA/IHVwY2FzZWQgOiBtZXRob2RcclxuICAgIH1cclxuICBcclxuICAgIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcclxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XHJcbiAgICAgIHZhciBib2R5ID0gb3B0aW9ucy5ib2R5O1xyXG4gIFxyXG4gICAgICBpZiAoaW5wdXQgaW5zdGFuY2VvZiBSZXF1ZXN0KSB7XHJcbiAgICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLnVybCA9IGlucHV0LnVybDtcclxuICAgICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XHJcbiAgICAgICAgaWYgKCFvcHRpb25zLmhlYWRlcnMpIHtcclxuICAgICAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKGlucHV0LmhlYWRlcnMpO1xyXG4gICAgICAgIH1cclxuICAgICAgICB0aGlzLm1ldGhvZCA9IGlucHV0Lm1ldGhvZDtcclxuICAgICAgICB0aGlzLm1vZGUgPSBpbnB1dC5tb2RlO1xyXG4gICAgICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsO1xyXG4gICAgICAgIGlmICghYm9keSAmJiBpbnB1dC5fYm9keUluaXQgIT0gbnVsbCkge1xyXG4gICAgICAgICAgYm9keSA9IGlucHV0Ll9ib2R5SW5pdDtcclxuICAgICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpO1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJztcclxuICAgICAgaWYgKG9wdGlvbnMuaGVhZGVycyB8fCAhdGhpcy5oZWFkZXJzKSB7XHJcbiAgICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcclxuICAgICAgfVxyXG4gICAgICB0aGlzLm1ldGhvZCA9IG5vcm1hbGl6ZU1ldGhvZChvcHRpb25zLm1ldGhvZCB8fCB0aGlzLm1ldGhvZCB8fCAnR0VUJyk7XHJcbiAgICAgIHRoaXMubW9kZSA9IG9wdGlvbnMubW9kZSB8fCB0aGlzLm1vZGUgfHwgbnVsbDtcclxuICAgICAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbDtcclxuICAgICAgdGhpcy5yZWZlcnJlciA9IG51bGw7XHJcbiAgXHJcbiAgICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcclxuICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdCb2R5IG5vdCBhbGxvd2VkIGZvciBHRVQgb3IgSEVBRCByZXF1ZXN0cycpXHJcbiAgICAgIH1cclxuICAgICAgdGhpcy5faW5pdEJvZHkoYm9keSk7XHJcbiAgICB9XHJcbiAgXHJcbiAgICBSZXF1ZXN0LnByb3RvdHlwZS5jbG9uZSA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICByZXR1cm4gbmV3IFJlcXVlc3QodGhpcywge2JvZHk6IHRoaXMuX2JvZHlJbml0fSlcclxuICAgIH07XHJcbiAgXHJcbiAgICBmdW5jdGlvbiBkZWNvZGUoYm9keSkge1xyXG4gICAgICB2YXIgZm9ybSA9IG5ldyBGb3JtRGF0YSgpO1xyXG4gICAgICBib2R5XHJcbiAgICAgICAgLnRyaW0oKVxyXG4gICAgICAgIC5zcGxpdCgnJicpXHJcbiAgICAgICAgLmZvckVhY2goZnVuY3Rpb24oYnl0ZXMpIHtcclxuICAgICAgICAgIGlmIChieXRlcykge1xyXG4gICAgICAgICAgICB2YXIgc3BsaXQgPSBieXRlcy5zcGxpdCgnPScpO1xyXG4gICAgICAgICAgICB2YXIgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XHJcbiAgICAgICAgICAgIHZhciB2YWx1ZSA9IHNwbGl0LmpvaW4oJz0nKS5yZXBsYWNlKC9cXCsvZywgJyAnKTtcclxuICAgICAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuICAgICAgcmV0dXJuIGZvcm1cclxuICAgIH1cclxuICBcclxuICAgIGZ1bmN0aW9uIHBhcnNlSGVhZGVycyhyYXdIZWFkZXJzKSB7XHJcbiAgICAgIHZhciBoZWFkZXJzID0gbmV3IEhlYWRlcnMoKTtcclxuICAgICAgLy8gUmVwbGFjZSBpbnN0YW5jZXMgb2YgXFxyXFxuIGFuZCBcXG4gZm9sbG93ZWQgYnkgYXQgbGVhc3Qgb25lIHNwYWNlIG9yIGhvcml6b250YWwgdGFiIHdpdGggYSBzcGFjZVxyXG4gICAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxyXG4gICAgICB2YXIgcHJlUHJvY2Vzc2VkSGVhZGVycyA9IHJhd0hlYWRlcnMucmVwbGFjZSgvXFxyP1xcbltcXHQgXSsvZywgJyAnKTtcclxuICAgICAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goZnVuY3Rpb24obGluZSkge1xyXG4gICAgICAgIHZhciBwYXJ0cyA9IGxpbmUuc3BsaXQoJzonKTtcclxuICAgICAgICB2YXIga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKCk7XHJcbiAgICAgICAgaWYgKGtleSkge1xyXG4gICAgICAgICAgdmFyIHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKTtcclxuICAgICAgICAgIGhlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSk7XHJcbiAgICAgIHJldHVybiBoZWFkZXJzXHJcbiAgICB9XHJcbiAgXHJcbiAgICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xyXG4gIFxyXG4gICAgZnVuY3Rpb24gUmVzcG9uc2UoYm9keUluaXQsIG9wdGlvbnMpIHtcclxuICAgICAgaWYgKCFvcHRpb25zKSB7XHJcbiAgICAgICAgb3B0aW9ucyA9IHt9O1xyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHRoaXMudHlwZSA9ICdkZWZhdWx0JztcclxuICAgICAgdGhpcy5zdGF0dXMgPSBvcHRpb25zLnN0YXR1cyA9PT0gdW5kZWZpbmVkID8gMjAwIDogb3B0aW9ucy5zdGF0dXM7XHJcbiAgICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XHJcbiAgICAgIHRoaXMuc3RhdHVzVGV4dCA9ICdzdGF0dXNUZXh0JyBpbiBvcHRpb25zID8gb3B0aW9ucy5zdGF0dXNUZXh0IDogJ09LJztcclxuICAgICAgdGhpcy5oZWFkZXJzID0gbmV3IEhlYWRlcnMob3B0aW9ucy5oZWFkZXJzKTtcclxuICAgICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcclxuICAgICAgdGhpcy5faW5pdEJvZHkoYm9keUluaXQpO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgQm9keS5jYWxsKFJlc3BvbnNlLnByb3RvdHlwZSk7XHJcbiAgXHJcbiAgICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xyXG4gICAgICAgIHN0YXR1czogdGhpcy5zdGF0dXMsXHJcbiAgICAgICAgc3RhdHVzVGV4dDogdGhpcy5zdGF0dXNUZXh0LFxyXG4gICAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXHJcbiAgICAgICAgdXJsOiB0aGlzLnVybFxyXG4gICAgICB9KVxyXG4gICAgfTtcclxuICBcclxuICAgIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIHZhciByZXNwb25zZSA9IG5ldyBSZXNwb25zZShudWxsLCB7c3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJ30pO1xyXG4gICAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJztcclxuICAgICAgcmV0dXJuIHJlc3BvbnNlXHJcbiAgICB9O1xyXG4gIFxyXG4gICAgdmFyIHJlZGlyZWN0U3RhdHVzZXMgPSBbMzAxLCAzMDIsIDMwMywgMzA3LCAzMDhdO1xyXG4gIFxyXG4gICAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbih1cmwsIHN0YXR1cykge1xyXG4gICAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ0ludmFsaWQgc3RhdHVzIGNvZGUnKVxyXG4gICAgICB9XHJcbiAgXHJcbiAgICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwge3N0YXR1czogc3RhdHVzLCBoZWFkZXJzOiB7bG9jYXRpb246IHVybH19KVxyXG4gICAgfTtcclxuICBcclxuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb247XHJcbiAgICB0cnkge1xyXG4gICAgICBuZXcgZXhwb3J0cy5ET01FeGNlcHRpb24oKTtcclxuICAgIH0gY2F0Y2ggKGVycikge1xyXG4gICAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKG1lc3NhZ2UsIG5hbWUpIHtcclxuICAgICAgICB0aGlzLm1lc3NhZ2UgPSBtZXNzYWdlO1xyXG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XHJcbiAgICAgICAgdmFyIGVycm9yID0gRXJyb3IobWVzc2FnZSk7XHJcbiAgICAgICAgdGhpcy5zdGFjayA9IGVycm9yLnN0YWNrO1xyXG4gICAgICB9O1xyXG4gICAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XHJcbiAgICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IGV4cG9ydHMuRE9NRXhjZXB0aW9uO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZnVuY3Rpb24gZmV0Y2goaW5wdXQsIGluaXQpIHtcclxuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgICAgIHZhciByZXF1ZXN0ID0gbmV3IFJlcXVlc3QoaW5wdXQsIGluaXQpO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XHJcbiAgICAgICAgICByZXR1cm4gcmVqZWN0KG5ldyBleHBvcnRzLkRPTUV4Y2VwdGlvbignQWJvcnRlZCcsICdBYm9ydEVycm9yJykpXHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHZhciB4aHIgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcclxuICBcclxuICAgICAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcclxuICAgICAgICAgIHhoci5hYm9ydCgpO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICB4aHIub25sb2FkID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICB2YXIgb3B0aW9ucyA9IHtcclxuICAgICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxyXG4gICAgICAgICAgICBzdGF0dXNUZXh0OiB4aHIuc3RhdHVzVGV4dCxcclxuICAgICAgICAgICAgaGVhZGVyczogcGFyc2VIZWFkZXJzKHhoci5nZXRBbGxSZXNwb25zZUhlYWRlcnMoKSB8fCAnJylcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpO1xyXG4gICAgICAgICAgdmFyIGJvZHkgPSAncmVzcG9uc2UnIGluIHhociA/IHhoci5yZXNwb25zZSA6IHhoci5yZXNwb25zZVRleHQ7XHJcbiAgICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSk7XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcclxuICAgICAgICB9O1xyXG4gIFxyXG4gICAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSk7XHJcbiAgICAgICAgfTtcclxuICBcclxuICAgICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnaW5jbHVkZScpIHtcclxuICAgICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xyXG4gICAgICAgIH0gZWxzZSBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ29taXQnKSB7XHJcbiAgICAgICAgICB4aHIud2l0aENyZWRlbnRpYWxzID0gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIGlmICgncmVzcG9uc2VUeXBlJyBpbiB4aHIgJiYgc3VwcG9ydC5ibG9iKSB7XHJcbiAgICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xyXG4gICAgICAgIH1cclxuICBcclxuICAgICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwgbmFtZSkge1xyXG4gICAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIH0pO1xyXG4gIFxyXG4gICAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xyXG4gICAgICAgICAgcmVxdWVzdC5zaWduYWwuYWRkRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XHJcbiAgXHJcbiAgICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcclxuICAgICAgICAgICAgaWYgKHhoci5yZWFkeVN0YXRlID09PSA0KSB7XHJcbiAgICAgICAgICAgICAgcmVxdWVzdC5zaWduYWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignYWJvcnQnLCBhYm9ydFhocik7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH07XHJcbiAgICAgICAgfVxyXG4gIFxyXG4gICAgICAgIHhoci5zZW5kKHR5cGVvZiByZXF1ZXN0Ll9ib2R5SW5pdCA9PT0gJ3VuZGVmaW5lZCcgPyBudWxsIDogcmVxdWVzdC5fYm9keUluaXQpO1xyXG4gICAgICB9KVxyXG4gICAgfVxyXG4gIFxyXG4gICAgZmV0Y2gucG9seWZpbGwgPSB0cnVlO1xyXG4gIFxyXG4gICAgaWYgKCFzZWxmLmZldGNoKSB7XHJcbiAgICAgIHNlbGYuZmV0Y2ggPSBmZXRjaDtcclxuICAgICAgc2VsZi5IZWFkZXJzID0gSGVhZGVycztcclxuICAgICAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdDtcclxuICAgICAgc2VsZi5SZXNwb25zZSA9IFJlc3BvbnNlO1xyXG4gICAgfVxyXG4gIFxyXG4gICAgZXhwb3J0cy5IZWFkZXJzID0gSGVhZGVycztcclxuICAgIGV4cG9ydHMuUmVxdWVzdCA9IFJlcXVlc3Q7XHJcbiAgICBleHBvcnRzLlJlc3BvbnNlID0gUmVzcG9uc2U7XHJcbiAgICBleHBvcnRzLmZldGNoID0gZmV0Y2g7XHJcbiAgXHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xyXG4gIFxyXG4gIH0pKSk7XHJcbiAgIiwiIWZ1bmN0aW9uKGUsdCl7XCJvYmplY3RcIj09dHlwZW9mIGV4cG9ydHMmJlwidW5kZWZpbmVkXCIhPXR5cGVvZiBtb2R1bGU/dCgpOlwiZnVuY3Rpb25cIj09dHlwZW9mIGRlZmluZSYmZGVmaW5lLmFtZD9kZWZpbmUodCk6dCgpfSgwLGZ1bmN0aW9uKCl7XCJ1c2Ugc3RyaWN0XCI7ZnVuY3Rpb24gZShlKXt2YXIgdD10aGlzLmNvbnN0cnVjdG9yO3JldHVybiB0aGlzLnRoZW4oZnVuY3Rpb24obil7cmV0dXJuIHQucmVzb2x2ZShlKCkpLnRoZW4oZnVuY3Rpb24oKXtyZXR1cm4gbn0pfSxmdW5jdGlvbihuKXtyZXR1cm4gdC5yZXNvbHZlKGUoKSkudGhlbihmdW5jdGlvbigpe3JldHVybiB0LnJlamVjdChuKX0pfSl9ZnVuY3Rpb24gdChlKXtyZXR1cm4gbmV3IHRoaXMoZnVuY3Rpb24odCxuKXtmdW5jdGlvbiBvKGUsbil7aWYobiYmKFwib2JqZWN0XCI9PXR5cGVvZiBufHxcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKSl7dmFyIGY9bi50aGVuO2lmKFwiZnVuY3Rpb25cIj09dHlwZW9mIGYpcmV0dXJuIHZvaWQgZi5jYWxsKG4sZnVuY3Rpb24odCl7byhlLHQpfSxmdW5jdGlvbihuKXtyW2VdPXtzdGF0dXM6XCJyZWplY3RlZFwiLHJlYXNvbjpufSwwPT0tLWkmJnQocil9KX1yW2VdPXtzdGF0dXM6XCJmdWxmaWxsZWRcIix2YWx1ZTpufSwwPT0tLWkmJnQocil9aWYoIWV8fFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlLmxlbmd0aClyZXR1cm4gbihuZXcgVHlwZUVycm9yKHR5cGVvZiBlK1wiIFwiK2UrXCIgaXMgbm90IGl0ZXJhYmxlKGNhbm5vdCByZWFkIHByb3BlcnR5IFN5bWJvbChTeW1ib2wuaXRlcmF0b3IpKVwiKSk7dmFyIHI9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7aWYoMD09PXIubGVuZ3RoKXJldHVybiB0KFtdKTtmb3IodmFyIGk9ci5sZW5ndGgsZj0wO3IubGVuZ3RoPmY7ZisrKW8oZixyW2ZdKX0pfWZ1bmN0aW9uIG4oZSl7cmV0dXJuISghZXx8XCJ1bmRlZmluZWRcIj09dHlwZW9mIGUubGVuZ3RoKX1mdW5jdGlvbiBvKCl7fWZ1bmN0aW9uIHIoZSl7aWYoISh0aGlzIGluc3RhbmNlb2YgcikpdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByb21pc2VzIG11c3QgYmUgY29uc3RydWN0ZWQgdmlhIG5ld1wiKTtpZihcImZ1bmN0aW9uXCIhPXR5cGVvZiBlKXRocm93IG5ldyBUeXBlRXJyb3IoXCJub3QgYSBmdW5jdGlvblwiKTt0aGlzLl9zdGF0ZT0wLHRoaXMuX2hhbmRsZWQ9ITEsdGhpcy5fdmFsdWU9dW5kZWZpbmVkLHRoaXMuX2RlZmVycmVkcz1bXSxsKGUsdGhpcyl9ZnVuY3Rpb24gaShlLHQpe2Zvcig7Mz09PWUuX3N0YXRlOyllPWUuX3ZhbHVlOzAhPT1lLl9zdGF0ZT8oZS5faGFuZGxlZD0hMCxyLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe3ZhciBuPTE9PT1lLl9zdGF0ZT90Lm9uRnVsZmlsbGVkOnQub25SZWplY3RlZDtpZihudWxsIT09bil7dmFyIG87dHJ5e289bihlLl92YWx1ZSl9Y2F0Y2gocil7cmV0dXJuIHZvaWQgdSh0LnByb21pc2Uscil9Zih0LnByb21pc2Usbyl9ZWxzZSgxPT09ZS5fc3RhdGU/Zjp1KSh0LnByb21pc2UsZS5fdmFsdWUpfSkpOmUuX2RlZmVycmVkcy5wdXNoKHQpfWZ1bmN0aW9uIGYoZSx0KXt0cnl7aWYodD09PWUpdGhyb3cgbmV3IFR5cGVFcnJvcihcIkEgcHJvbWlzZSBjYW5ub3QgYmUgcmVzb2x2ZWQgd2l0aCBpdHNlbGYuXCIpO2lmKHQmJihcIm9iamVjdFwiPT10eXBlb2YgdHx8XCJmdW5jdGlvblwiPT10eXBlb2YgdCkpe3ZhciBuPXQudGhlbjtpZih0IGluc3RhbmNlb2YgcilyZXR1cm4gZS5fc3RhdGU9MyxlLl92YWx1ZT10LHZvaWQgYyhlKTtpZihcImZ1bmN0aW9uXCI9PXR5cGVvZiBuKXJldHVybiB2b2lkIGwoZnVuY3Rpb24oZSx0KXtyZXR1cm4gZnVuY3Rpb24oKXtlLmFwcGx5KHQsYXJndW1lbnRzKX19KG4sdCksZSl9ZS5fc3RhdGU9MSxlLl92YWx1ZT10LGMoZSl9Y2F0Y2gobyl7dShlLG8pfX1mdW5jdGlvbiB1KGUsdCl7ZS5fc3RhdGU9MixlLl92YWx1ZT10LGMoZSl9ZnVuY3Rpb24gYyhlKXsyPT09ZS5fc3RhdGUmJjA9PT1lLl9kZWZlcnJlZHMubGVuZ3RoJiZyLl9pbW1lZGlhdGVGbihmdW5jdGlvbigpe2UuX2hhbmRsZWR8fHIuX3VuaGFuZGxlZFJlamVjdGlvbkZuKGUuX3ZhbHVlKX0pO2Zvcih2YXIgdD0wLG49ZS5fZGVmZXJyZWRzLmxlbmd0aDtuPnQ7dCsrKWkoZSxlLl9kZWZlcnJlZHNbdF0pO2UuX2RlZmVycmVkcz1udWxsfWZ1bmN0aW9uIGwoZSx0KXt2YXIgbj0hMTt0cnl7ZShmdW5jdGlvbihlKXtufHwobj0hMCxmKHQsZSkpfSxmdW5jdGlvbihlKXtufHwobj0hMCx1KHQsZSkpfSl9Y2F0Y2gobyl7aWYobilyZXR1cm47bj0hMCx1KHQsbyl9fXZhciBhPXNldFRpbWVvdXQ7ci5wcm90b3R5cGVbXCJjYXRjaFwiXT1mdW5jdGlvbihlKXtyZXR1cm4gdGhpcy50aGVuKG51bGwsZSl9LHIucHJvdG90eXBlLnRoZW49ZnVuY3Rpb24oZSx0KXt2YXIgbj1uZXcgdGhpcy5jb25zdHJ1Y3RvcihvKTtyZXR1cm4gaSh0aGlzLG5ldyBmdW5jdGlvbihlLHQsbil7dGhpcy5vbkZ1bGZpbGxlZD1cImZ1bmN0aW9uXCI9PXR5cGVvZiBlP2U6bnVsbCx0aGlzLm9uUmVqZWN0ZWQ9XCJmdW5jdGlvblwiPT10eXBlb2YgdD90Om51bGwsdGhpcy5wcm9taXNlPW59KGUsdCxuKSksbn0sci5wcm90b3R5cGVbXCJmaW5hbGx5XCJdPWUsci5hbGw9ZnVuY3Rpb24oZSl7cmV0dXJuIG5ldyByKGZ1bmN0aW9uKHQsbyl7ZnVuY3Rpb24gcihlLG4pe3RyeXtpZihuJiYoXCJvYmplY3RcIj09dHlwZW9mIG58fFwiZnVuY3Rpb25cIj09dHlwZW9mIG4pKXt2YXIgdT1uLnRoZW47aWYoXCJmdW5jdGlvblwiPT10eXBlb2YgdSlyZXR1cm4gdm9pZCB1LmNhbGwobixmdW5jdGlvbih0KXtyKGUsdCl9LG8pfWlbZV09biwwPT0tLWYmJnQoaSl9Y2F0Y2goYyl7byhjKX19aWYoIW4oZSkpcmV0dXJuIG8obmV3IFR5cGVFcnJvcihcIlByb21pc2UuYWxsIGFjY2VwdHMgYW4gYXJyYXlcIikpO3ZhciBpPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpO2lmKDA9PT1pLmxlbmd0aClyZXR1cm4gdChbXSk7Zm9yKHZhciBmPWkubGVuZ3RoLHU9MDtpLmxlbmd0aD51O3UrKylyKHUsaVt1XSl9KX0sci5hbGxTZXR0bGVkPXQsci5yZXNvbHZlPWZ1bmN0aW9uKGUpe3JldHVybiBlJiZcIm9iamVjdFwiPT10eXBlb2YgZSYmZS5jb25zdHJ1Y3Rvcj09PXI/ZTpuZXcgcihmdW5jdGlvbih0KXt0KGUpfSl9LHIucmVqZWN0PWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcihmdW5jdGlvbih0LG4pe24oZSl9KX0sci5yYWNlPWZ1bmN0aW9uKGUpe3JldHVybiBuZXcgcihmdW5jdGlvbih0LG8pe2lmKCFuKGUpKXJldHVybiBvKG5ldyBUeXBlRXJyb3IoXCJQcm9taXNlLnJhY2UgYWNjZXB0cyBhbiBhcnJheVwiKSk7Zm9yKHZhciBpPTAsZj1lLmxlbmd0aDtmPmk7aSsrKXIucmVzb2x2ZShlW2ldKS50aGVuKHQsbyl9KX0sci5faW1tZWRpYXRlRm49XCJmdW5jdGlvblwiPT10eXBlb2Ygc2V0SW1tZWRpYXRlJiZmdW5jdGlvbihlKXtzZXRJbW1lZGlhdGUoZSl9fHxmdW5jdGlvbihlKXthKGUsMCl9LHIuX3VuaGFuZGxlZFJlamVjdGlvbkZuPWZ1bmN0aW9uKGUpe3ZvaWQgMCE9PWNvbnNvbGUmJmNvbnNvbGUmJmNvbnNvbGUud2FybihcIlBvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjpcIixlKX07dmFyIHM9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygc2VsZilyZXR1cm4gc2VsZjtpZihcInVuZGVmaW5lZFwiIT10eXBlb2Ygd2luZG93KXJldHVybiB3aW5kb3c7aWYoXCJ1bmRlZmluZWRcIiE9dHlwZW9mIGdsb2JhbClyZXR1cm4gZ2xvYmFsO3Rocm93IEVycm9yKFwidW5hYmxlIHRvIGxvY2F0ZSBnbG9iYWwgb2JqZWN0XCIpfSgpO1wiZnVuY3Rpb25cIiE9dHlwZW9mIHMuUHJvbWlzZT9zLlByb21pc2U9cjoocy5Qcm9taXNlLnByb3RvdHlwZVtcImZpbmFsbHlcIl18fChzLlByb21pc2UucHJvdG90eXBlW1wiZmluYWxseVwiXT1lKSxzLlByb21pc2UuYWxsU2V0dGxlZHx8KHMuUHJvbWlzZS5hbGxTZXR0bGVkPXQpKX0pOyIsImNvbnN0IHBva2Vtb25SZXBvc2l0b3J5ID0gKGZ1bmN0aW9uKCkge1xyXG4gICAgY29uc3QgcG9rZW1vbkxpc3QgPSBbXTtcclxuICAgIGNvbnN0IGFwaVVybCA9ICdodHRwczovL3Bva2VhcGkuY28vYXBpL3YyL3Bva2Vtb24vP2xpbWl0PTE1MCc7XHJcbiAgICBjb25zdCBsaXN0UG9rZW1vbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIucG9rZW1vbi1saXN0XCIpOyAvLyBzZWxlY3RpbmcgZGl2IGZyb20gaHRtbFxyXG4gICAgY29uc3QgaW5wdXRGaWVsZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWNvbnRyb2wnKTtcclxuXHJcbiAgICBpbnB1dEZpZWxkLmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgZnVuY3Rpb24oKSB7IFxyXG4gICAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IGlucHV0RmllbGQudmFsdWUudG9Mb3dlckNhc2UoKTtcclxuICAgICAgY29uc3QgZmlsdGVyZWRQb2tlbW9uID0gcG9rZW1vbkxpc3QuZmlsdGVyKHBva2Vtb24gPT5cclxuICAgICAgICBwb2tlbW9uLm5hbWUudG9Mb3dlckNhc2UoKS5pbmNsdWRlcyhzZWFyY2hWYWx1ZSlcclxuICAgICAgKTtcclxuICAgICAgbGlzdFBva2Vtb24uaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgIGZpbHRlcmVkUG9rZW1vbi5mb3JFYWNoKHBva2Vtb24gPT4gYWRkTGlzdEl0ZW0ocG9rZW1vbikpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZExpc3QoKSB7IFxyXG4gICAgICBzaG93TG9hZGluZ01lc3NhZ2UoKTtcclxuICAgICAgdHJ5e1xyXG4gICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goYXBpVXJsKTsgLy8gZ2V0cyBhIHByb21pc2UgZnJvbSBhcGlVcmxcclxuICAgICAgICBjb25zdCBqc29uID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOyAvLyByZXNwb25zZSBpcyB0aGVuIGNhbGxlZCB3aXRoIC5qc29uKCkgbWV0aG9kXHJcbiAgICAgICAganNvbi5yZXN1bHRzLmZvckVhY2goZnVuY3Rpb24oaXRlbSkgeyAvLyBpdGVyYXRlcyBvdmVyIHRoZSByZXN1bHRzIG9mIHRoZSBqc29uXHJcbiAgICAgICAgICBjb25zdCBwb2tlbW9uID0geyAgXHJcbiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubmFtZSxcclxuICAgICAgICAgICAgZGV0YWlsc1VybDogaXRlbS51cmxcclxuICAgICAgICAgIH07XHJcbiAgICAgICAgICBhZGQocG9rZW1vbik7IFxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIGhpZGVMb2FkaW5nTWVzc2FnZSgpO1xyXG4gICAgICB9IGNhdGNoIChlKSB7IFxyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgaGlkZUxvYWRpbmdNZXNzYWdlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIFxyXG4gICAgYXN5bmMgZnVuY3Rpb24gbG9hZERldGFpbHMocG9rZW1vbikgeyBcclxuICAgICAgY29uc3QgdXJsID0gcG9rZW1vbi5kZXRhaWxzVXJsO1xyXG4gICAgICBzaG93TG9hZGluZ01lc3NhZ2UoKTtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHVybCk7IC8vIGdldHMgYSBwcm9taXNlIGZyb20gZGV0YWlsc1VybFxyXG4gICAgICAgIGNvbnN0IGRldGFpbHMgPSBhd2FpdCByZXNwb25zZS5qc29uKCk7IC8vIHR1cm5zIHRoZSByZXNwb25zZSBpbnRvIGEganNvbiBjYWxsZWQgZGV0YWlsc1xyXG4gICAgICAgIHBva2Vtb24uaGVpZ2h0ID0gZGV0YWlscy5oZWlnaHQ7XHJcbiAgICAgICAgcG9rZW1vbi5mcm9udEltZ1VybCA9IGRldGFpbHMuc3ByaXRlcy5mcm9udF9kZWZhdWx0O1xyXG4gICAgICAgIHBva2Vtb24uYmFja0ltZ1VybCA9IGRldGFpbHMuc3ByaXRlcy5iYWNrX2RlZmF1bHQ7XHJcbiAgICAgICAgXHJcbiAgICAgICAgY29uc3QgcG9rZW1vblR5cGVzID0gW107XHJcbiAgICAgICAgXHJcbiAgICAgICAgZGV0YWlscy50eXBlcy5mb3JFYWNoKGZ1bmN0aW9uKGl0ZW0peyAvLyBpdGVyYXRpbmcgb3ZlciB0aGUgZGV0YWlscy50eXBlc1xyXG4gICAgICAgICAgcG9rZW1vblR5cGVzLnB1c2goaXRlbS50eXBlLm5hbWUpOyAvLyBwdXNoaW5nIHRoZSBpdGVtcyBpbnRvIHBva2Vtb25UeXBlc1xyXG4gICAgICAgIH0pXHJcbiAgICAgICAgcG9rZW1vbi50eXBlcyA9IHBva2Vtb25UeXBlcy5qb2luKCcsICcpO1xyXG5cclxuICAgICAgICBoaWRlTG9hZGluZ01lc3NhZ2UoKTtcclxuICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XHJcbiAgICAgICAgaGlkZUxvYWRpbmdNZXNzYWdlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgICAgICBcclxuICAgIGZ1bmN0aW9uIGFkZChwb2tlbW9uKSB7IC8vIGZ1bmN0aW9uIGdyYWJzIHRoZSBwb2tlbW9uYXBpIGxpc3QgdGhyb3VnaCB0aGUgbG9hZExpc3QgZnVuY3Rpb25cclxuICAgICAgICBpZiAoIFxyXG4gICAgICAgICAgdHlwZW9mIHBva2Vtb24gPT09ICdvYmplY3QnICYmICAvLyBpZiBwb2tlbW9uIGlzIGFuIG9iamVjdCBcclxuICAgICAgICAgIE9iamVjdC5rZXlzKHBva2Vtb24pLmluY2x1ZGVzKCduYW1lJyAmJiAnZGV0YWlsc1VybCcpIC8vIGFuZCB0aGUga2V5cyBhcmUgLm5hbWUgYW5kIC5kZXRhaWxzVXJsXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICBwb2tlbW9uTGlzdC5wdXNoKHBva2Vtb24pOyAvLyBpZiBzbyBwdXNoIHBva2Vtb24gdG8gdGhlIHBva2Vtb25MaXN0IGFycmF5XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoXHJcbiAgICAgICAgICAgICdQb2vDqW1vbiBoYXMgdG8gYmUgYWRkZWQgdXNpbmcgdGhpcyBmb3JtYXQ6IHtuYW1lOiwgZGV0YWlsc1VybDp9J1xyXG4gICAgICAgICAgKTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gaGlkZU1vZGFsKCkge1xyXG4gICAgICBtb2RhbENvbnRhaW5lci5jbGFzc0xpc3QuYWRkKCdoaWRkZW4nKTtcclxuICAgIH1cclxuXHJcbiAgICBmdW5jdGlvbiBzaG93TG9hZGluZ01lc3NhZ2UoKSB7XHJcbiAgICAgIGNvbnN0IGxvYWRpbmdNZXNzYWdlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyB0aGlzIGlzIGNyZWF0aW5nIGFuIGVsZW1lbnQgJ3AnXHJcbiAgICAgIGxvYWRpbmdNZXNzYWdlLmlubmVyVGV4dCA9ICdMb2FkaW5nLi4uJzsgLy8gdGhpcyB3aWxsIGRpc3BsYXkgb24gdGhlIGlubmVyIHRleHRcclxuICAgICAgbG9hZGluZ01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnbG9hZGluZy1tZXNzYWdlJyk7IC8vY3JlYXRlcyBhIGNsYXNzbGlzdC4gY2FsbCA9PiAnLmxvYWRpbmctbWVzc2FnZSdcclxuICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChsb2FkaW5nTWVzc2FnZSk7IC8vIGFkZHMgZWxlbWVudCB0byB0aGUgPGJvZHk+IGVsZW1lbnRcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gaGlkZUxvYWRpbmdNZXNzYWdlKCkge1xyXG4gICAgICBjb25zdCBsb2FkaW5nTWVzc2FnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5sb2FkaW5nLW1lc3NhZ2UnKTsgLy90aGlzIGlzIHNlbGVjdGluZyB0aGUgbG9hZGluZ01lc3NhZ2UgZWxlbWVudFxyXG4gICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGxvYWRpbmdNZXNzYWdlKTsgLy8gdGhpcyBpcyByZXZvbWluZyB0aGUgZWxlbWVudCB3aGVuIGNhbGxlZCBcclxuICAgIH1cclxuICAgIFxyXG4gICAgZnVuY3Rpb24gZ2V0QWxsKCkgeyAvLyBnZXRBbGwgZnVuY3Rpb24gd2lsbCByZXR1cm4gdGhlIGFycmF5IHBva2Vtb25MaXN0XHJcbiAgICAgIHJldHVybiBwb2tlbW9uTGlzdDtcclxuICAgIH0gXHJcblxyXG4gICAgXHJcbiAgICBmdW5jdGlvbiBhZGRMaXN0SXRlbShwb2tlbW9uKSB7IFxyXG4gICAgICBsb2FkRGV0YWlscyhwb2tlbW9uKS50aGVuKGZ1bmN0aW9uKCkgeyAvLyBtdXN0IGxvYWQgcG9rZW1vbmRldGFpbHMgdG8gbG9hZCBpbWdVcmwgb250byBidXR0b25cclxuICAgICAgICBjb25zdCBsaXN0SXRlbXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOyAvLyBjcmVhdGluZyBsaSBlbGVtZW50XHJcbiAgICAgICAgbGlzdEl0ZW1zLmNsYXNzTGlzdC5hZGQoJ2xpc3QtaXRlbXMnKTsgXHJcbiAgICAgICAgbGlzdEl0ZW1zLmNsYXNzTGlzdC5hZGQoJ2dyb3VwLWxpc3QtaXRlbScpO1xyXG5cclxuICAgICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsgLy8gY3JlYXRpbmcgYnV0dG9uIGVsZW1lbnRcclxuICAgICAgICBidXR0b24uaW5uZXJUZXh0ID0gcG9rZW1vbi5uYW1lOyAgICAgLy8gYnV0dG9uIGhhcyBwb2tlbW9uLm5hbWVcclxuICAgICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYnV0dG9uLWNsYXNzJyk7ICAvLyBhZGRlZCBhIGNsYXNzIHRvIGJ1dHRvblxyXG4gICAgICAgIGJ1dHRvbi5jbGFzc0xpc3QuYWRkKCdidG4nKTtcclxuICAgICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZScsICdtb2RhbCcpO1xyXG4gICAgICAgIGJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2RhdGEtdGFyZ2V0JywgJy5tb2RhbCcpO1xyXG5cclxuICAgICAgICBjb25zdCBwb2tlbW9uSW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7IFxyXG4gICAgICAgIHBva2Vtb25JbWcuc3JjID0gcG9rZW1vbi5mcm9udEltZ1VybDtcclxuICAgICAgICBwb2tlbW9uSW1nLmNsYXNzTGlzdC5hZGQoJ2J1dHRvbi1wb2tlbW9uSW1nJyk7XHJcbiAgICAgICAgXHJcbiAgICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZnVuY3Rpb24oKSB7ICAvLyB3aGVuIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBzaG93RGV0YWlscygpIGlzIGludm9rZWRcclxuICAgICAgICAgICAgc2hvd0RldGFpbHMocG9rZW1vbik7XHJcbiAgICAgICAgICAgICQoJyNleGFtcGxlTW9kYWxDZW50ZXInKS5tb2RhbCgnc2hvdycpXHJcbiAgICAgIH0pO1xyXG5cclxuICAgICAgYnV0dG9uLmFwcGVuZENoaWxkKHBva2Vtb25JbWcpO1xyXG4gICAgICBsaXN0SXRlbXMuYXBwZW5kQ2hpbGQoYnV0dG9uKTsgXHJcbiAgICAgIGxpc3RQb2tlbW9uLmFwcGVuZENoaWxkKGxpc3RJdGVtcyk7IFxyXG4gICAgICB9KTtcclxuXHJcbiAgICB9XHJcblxyXG4gICAgZnVuY3Rpb24gc2hvd0RldGFpbHMocG9rZW1vbikge1xyXG4gICAgICBsb2FkRGV0YWlscyhwb2tlbW9uKS50aGVuKGZ1bmN0aW9uKCkgeyAvLyBsb2FkRGV0YWlscyBnZXRzIGNhbGxlZCBpblxyXG4gICAgICAgIGNvbnN0IG1vZGFsQm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC1ib2R5Jyk7XHJcbiAgICAgICAgY29uc3QgbW9kYWxUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC10aXRsZScpO1xyXG5cclxuICAgICAgICBtb2RhbEJvZHkuaW5uZXJIVE1MID0gJyc7XHJcbiAgICAgICAgbW9kYWxUaXRsZS5pbm5lckhUTUwgPSAnJztcclxuXHJcbiAgICAgICAgbW9kYWxUaXRsZS5pbm5lclRleHQgPSBwb2tlbW9uLm5hbWU7XHJcbiAgICAgICAgbW9kYWxUaXRsZS5jbGFzc0xpc3QuYWRkKCdtb2RhbC10aXRsZScpO1xyXG5cclxuICAgICAgICBjb25zdCBoZWlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7IC8vIGNyZWF0aW5nIGFuIGVsZW1lbnQgZm9yIHRoZSBwb2tlbW9uLmhlaWdodFxyXG4gICAgICAgIGhlaWdodC5pbm5lclRleHQgPSAnSGVpZ2h0JyArICc6ICcgKyBwb2tlbW9uLmhlaWdodDtcclxuICAgICAgICBoZWlnaHQuY2xhc3NMaXN0LmFkZCgnbW9kYWwtaGVpZ2h0Jyk7XHJcblxyXG4gICAgICAgIGNvbnN0IGZyb250SW1nID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnaW1nJyk7IC8vIGNyZWF0aW5nIGltZyBlbGVtZW50cyBmb3IgdGhlIHBva2Vtb25cclxuICAgICAgICBmcm9udEltZy5zcmMgPSBwb2tlbW9uLmZyb250SW1nVXJsO1xyXG4gICAgICAgIGNvbnN0IGJhY2tJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcclxuICAgICAgICBiYWNrSW1nLnNyYyA9IHBva2Vtb24uYmFja0ltZ1VybDtcclxuICAgICAgICBmcm9udEltZy5jbGFzc0xpc3QuYWRkKCdtb2RhbC1pbWcnKTtcclxuICAgICAgICBiYWNrSW1nLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWltZycpO1xyXG4gICAgICAgIFxyXG4gICAgICAgIGxldCBtb2RhbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICAgICAgICBtb2RhbFRleHQuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdGV4dCcpO1xyXG5cclxuICAgICAgICBjb25zdCB0eXBlcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxuICAgICAgICB0eXBlcy5pbm5lclRleHQgPSAnVHlwZXMnICsgJzogJyArIHBva2Vtb24udHlwZXM7XHJcbiAgICAgICAgdHlwZXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdHlwZXMnKTtcclxuXHJcbiAgICAgICAgbW9kYWxCb2R5LmFwcGVuZENoaWxkKGZyb250SW1nKTtcclxuICAgICAgICBtb2RhbEJvZHkuYXBwZW5kQ2hpbGQoYmFja0ltZyk7XHJcbiAgICAgICAgbW9kYWxCb2R5LmFwcGVuZENoaWxkKG1vZGFsVGV4dCk7XHJcbiAgICAgICAgbW9kYWxUZXh0LmFwcGVuZENoaWxkKGhlaWdodCk7XHJcbiAgICAgICAgbW9kYWxUZXh0LmFwcGVuZENoaWxkKHR5cGVzKTtcclxuICAgICAgfSk7XHJcblxyXG4gICAgfVxyXG5cclxuICAgIC8vIGNsb3NlcyB0aGUgbW9kYWwgb24gRVNDXHJcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIGZ1bmN0aW9uIChldmVudCkge1xyXG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICAgIGhpZGVNb2RhbCgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBsb2FkTGlzdDogbG9hZExpc3QsXHJcbiAgICAgIGFkZDogYWRkLFxyXG4gICAgICBsb2FkRGV0YWlsczogbG9hZERldGFpbHMsXHJcbiAgICAgIGdldEFsbDogZ2V0QWxsLFxyXG4gICAgICBzaG93RGV0YWlsczogc2hvd0RldGFpbHMsXHJcbiAgICAgIGFkZExpc3RJdGVtOiBhZGRMaXN0SXRlbSxcclxuICAgIH07XHJcbn0pKCk7XHJcblxyXG5cclxucG9rZW1vblJlcG9zaXRvcnkubG9hZExpc3QoKS50aGVuKGZ1bmN0aW9uKCkgIHsgIFxyXG4gIGNvbnN0IGFsbHBva2Vtb24gPSBwb2tlbW9uUmVwb3NpdG9yeS5nZXRBbGwoKTtcclxuICBhbGxwb2tlbW9uLmZvckVhY2goZnVuY3Rpb24ocG9rZW1vbikgeyBcclxuICAgIHBva2Vtb25SZXBvc2l0b3J5LmFkZExpc3RJdGVtKHBva2Vtb24pO1xyXG4gIH0pO1xyXG59KTtcclxuXHJcblxyXG4iXX0=

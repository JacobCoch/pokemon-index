!(function (e, t) { typeof exports === 'object' && typeof module !== 'undefined' ? t(exports) : typeof define === 'function' && define.amd ? define(['exports'], t) : t(e.WHATWGFetch = {}); }(this, (a) => {
  const l = {
    searchParams: 'URLSearchParams' in self, iterable: 'Symbol' in self && 'iterator' in Symbol, blob: 'FileReader' in self && 'Blob' in self && (function () { try { return new Blob(), !0; } catch (e) { return !1; } }()), formData: 'FormData' in self, arrayBuffer: 'ArrayBuffer' in self,
  }; if (l.arrayBuffer) { const w = ['[object Int8Array]', '[object Uint8Array]', '[object Uint8ClampedArray]', '[object Int16Array]', '[object Uint16Array]', '[object Int32Array]', '[object Uint32Array]', '[object Float32Array]', '[object Float64Array]']; var r = ArrayBuffer.isView || function (e) { return e && w.indexOf(Object.prototype.toString.call(e)) > -1; }; } function o(e) { if (typeof e !== 'string' && (e = String(e)), /[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e)) throw new TypeError('Invalid character in header field name'); return e.toLowerCase(); } function n(e) { return e = typeof e !== 'string' ? String(e) : e; } function e(t) { const e = { next() { const e = t.shift(); return { done: void 0 === e, value: e }; } }; return l.iterable && (e[Symbol.iterator] = function () { return e; }), e; } function c(t) { this.map = {}, t instanceof c ? t.forEach(function (e, t) { this.append(t, e); }, this) : Array.isArray(t) ? t.forEach(function (e) { this.append(e[0], e[1]); }, this) : t && Object.getOwnPropertyNames(t).forEach(function (e) { this.append(e, t[e]); }, this); } function i(e) { if (e.bodyUsed) return Promise.reject(new TypeError('Already read')); e.bodyUsed = !0; } function s(r) { return new Promise((e, t) => { r.onload = function () { e(r.result); }, r.onerror = function () { t(r.error); }; }); } function t(e) {
    const t = new FileReader(); const
      r = s(t); return t.readAsArrayBuffer(e), r;
  } function d(e) { let t; return e.slice ? e.slice(0) : ((t = new Uint8Array(e.byteLength)).set(new Uint8Array(e)), t.buffer); } function u() { return this.bodyUsed = !1, this._initBody = function (e) { let t; (this._bodyInit = e) ? typeof e === 'string' ? this._bodyText = e : l.blob && Blob.prototype.isPrototypeOf(e) ? this._bodyBlob = e : l.formData && FormData.prototype.isPrototypeOf(e) ? this._bodyFormData = e : l.searchParams && URLSearchParams.prototype.isPrototypeOf(e) ? this._bodyText = e.toString() : l.arrayBuffer && l.blob && (t = e) && DataView.prototype.isPrototypeOf(t) ? (this._bodyArrayBuffer = d(e.buffer), this._bodyInit = new Blob([this._bodyArrayBuffer])) : l.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(e) || r(e)) ? this._bodyArrayBuffer = d(e) : this._bodyText = e = Object.prototype.toString.call(e) : this._bodyText = '', this.headers.get('content-type') || (typeof e === 'string' ? this.headers.set('content-type', 'text/plain;charset=UTF-8') : this._bodyBlob && this._bodyBlob.type ? this.headers.set('content-type', this._bodyBlob.type) : l.searchParams && URLSearchParams.prototype.isPrototypeOf(e) && this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')); }, l.blob && (this.blob = function () { const e = i(this); if (e) return e; if (this._bodyBlob) return Promise.resolve(this._bodyBlob); if (this._bodyArrayBuffer) return Promise.resolve(new Blob([this._bodyArrayBuffer])); if (this._bodyFormData) throw new Error('could not read FormData body as blob'); return Promise.resolve(new Blob([this._bodyText])); }, this.arrayBuffer = function () { return this._bodyArrayBuffer ? i(this) || Promise.resolve(this._bodyArrayBuffer) : this.blob().then(t); }), this.text = function () { let e; let t; let r = i(this); if (r) return r; if (this._bodyBlob) return r = this._bodyBlob, e = new FileReader(), t = s(e), e.readAsText(r), t; if (this._bodyArrayBuffer) return Promise.resolve(function (e) { const t = new Uint8Array(e); const r = new Array(t.length); for (let e = 0; e < t.length; e++)r[e] = String.fromCharCode(t[e]); return r.join(''); }(this._bodyArrayBuffer)); if (this._bodyFormData) throw new Error('could not read FormData body as text'); return Promise.resolve(this._bodyText); }, l.formData && (this.formData = function () { return this.text().then(p); }), this.json = function () { return this.text().then(JSON.parse); }, this; }c.prototype.append = function (e, t) { e = o(e), t = n(t); const r = this.map[e]; this.map[e] = r ? `${r}, ${t}` : t; }, c.prototype.delete = function (e) { delete this.map[o(e)]; }, c.prototype.get = function (e) { return e = o(e), this.has(e) ? this.map[e] : null; }, c.prototype.has = function (e) { return this.map.hasOwnProperty(o(e)); }, c.prototype.set = function (e, t) { this.map[o(e)] = n(t); }, c.prototype.forEach = function (e, t) { for (const r in this.map) this.map.hasOwnProperty(r) && e.call(t, this.map[r], r, this); }, c.prototype.keys = function () { const r = []; return this.forEach((e, t) => { r.push(t); }), e(r); }, c.prototype.values = function () { const t = []; return this.forEach((e) => { t.push(e); }), e(t); }, c.prototype.entries = function () { const r = []; return this.forEach((e, t) => { r.push([t, e]); }), e(r); }, l.iterable && (c.prototype[Symbol.iterator] = c.prototype.entries); const f = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']; function h(e, t) { let r = (t = t || {}).body; if (e instanceof h) { if (e.bodyUsed) throw new TypeError('Already read'); this.url = e.url, this.credentials = e.credentials, t.headers || (this.headers = new c(e.headers)), this.method = e.method, this.mode = e.mode, this.signal = e.signal, r || e._bodyInit == null || (r = e._bodyInit, e.bodyUsed = !0); } else this.url = String(e); let o; if (this.credentials = t.credentials || this.credentials || 'same-origin', !t.headers && this.headers || (this.headers = new c(t.headers)), this.method = (e = t.method || this.method || 'GET', o = e.toUpperCase(), f.indexOf(o) > -1 ? o : e), this.mode = t.mode || this.mode || null, this.signal = t.signal || this.signal, this.referrer = null, (this.method === 'GET' || this.method === 'HEAD') && r) throw new TypeError('Body not allowed for GET or HEAD requests'); this._initBody(r); } function p(e) { const r = new FormData(); return e.trim().split('&').forEach((e) => { let t; e && (t = (e = e.split('=')).shift().replace(/\+/g, ' '), e = e.join('=').replace(/\+/g, ' '), r.append(decodeURIComponent(t), decodeURIComponent(e))); }), r; } function y(e, t) { t = t || {}, this.type = 'default', this.status = void 0 === t.status ? 200 : t.status, this.ok = this.status >= 200 && this.status < 300, this.statusText = 'statusText' in t ? t.statusText : 'OK', this.headers = new c(t.headers), this.url = t.url || '', this._initBody(e); }h.prototype.clone = function () { return new h(this, { body: this._bodyInit }); }, u.call(h.prototype), u.call(y.prototype), y.prototype.clone = function () {
    return new y(this._bodyInit, {
      status: this.status, statusText: this.statusText, headers: new c(this.headers), url: this.url,
    });
  }, y.error = function () { const e = new y(null, { status: 0, statusText: '' }); return e.type = 'error', e; }; const m = [301, 302, 303, 307, 308]; y.redirect = function (e, t) { if (m.indexOf(t) === -1) throw new RangeError('Invalid status code'); return new y(null, { status: t, headers: { location: e } }); }, a.DOMException = self.DOMException; try { new a.DOMException(); } catch (e) { a.DOMException = function (e, t) { this.message = e, this.name = t; t = Error(e); this.stack = t.stack; }, a.DOMException.prototype = Object.create(Error.prototype), a.DOMException.prototype.constructor = a.DOMException; } function b(i, s) { return new Promise((r, e) => { const t = new h(i, s); if (t.signal && t.signal.aborted) return e(new a.DOMException('Aborted', 'AbortError')); const o = new XMLHttpRequest(); function n() { o.abort(); }o.onload = function () { const e = { status: o.status, statusText: o.statusText, headers: (function (e) { const r = new c(); return e.replace(/\r?\n[\t ]+/g, ' ').split(/\r?\n/).forEach((e) => { var e = e.split(':'); const t = e.shift().trim(); t && (e = e.join(':').trim(), r.append(t, e)); }), r; }(o.getAllResponseHeaders() || '')) }; const t = (e.url = 'responseURL' in o ? o.responseURL : e.headers.get('X-Request-URL'), 'response' in o ? o.response : o.responseText); r(new y(t, e)); }, o.onerror = function () { e(new TypeError('Network request failed')); }, o.ontimeout = function () { e(new TypeError('Network request failed')); }, o.onabort = function () { e(new a.DOMException('Aborted', 'AbortError')); }, o.open(t.method, t.url, !0), t.credentials === 'include' ? o.withCredentials = !0 : t.credentials === 'omit' && (o.withCredentials = !1), 'responseType' in o && l.blob && (o.responseType = 'blob'), t.headers.forEach((e, t) => { o.setRequestHeader(t, e); }), t.signal && (t.signal.addEventListener('abort', n), o.onreadystatechange = function () { o.readyState === 4 && t.signal.removeEventListener('abort', n); }), o.send(void 0 === t._bodyInit ? null : t._bodyInit); }); }b.polyfill = !0, self.fetch || (self.fetch = b, self.Headers = c, self.Request = h, self.Response = y), a.Headers = c, a.Request = h, a.Response = y, a.fetch = b, Object.defineProperty(a, '__esModule', { value: !0 });
})), (function (e) { (typeof exports !== 'object' || typeof module === 'undefined') && typeof define === 'function' && define.amd ? define(e) : e(); }(() => { function e(t) { const r = this.constructor; return this.then((e) => r.resolve(t()).then(() => e), (e) => r.resolve(t()).then(() => r.reject(e))); } function t(r) { return new this((n, e) => { if (!r || void 0 === r.length) return e(new TypeError(`${typeof r} ${r} is not iterable(cannot read property Symbol(Symbol.iterator))`)); const i = Array.prototype.slice.call(r); if (i.length === 0) return n([]); for (var s = i.length, t = 0; i.length > t; t++)!(function t(r, e) { if (e && (typeof e === 'object' || typeof e === 'function')) { const o = e.then; if (typeof o === 'function') return o.call(e, (e) => { t(r, e); }, (e) => { i[r] = { status: 'rejected', reason: e }, --s == 0 && n(i); }); }i[r] = { status: 'fulfilled', value: e }, --s == 0 && n(i); }(t, i[t])); }); } function l(e) { return e && void 0 !== e.length; } function r() {} function i(e) { if (!(this instanceof i)) throw new TypeError('Promises must be constructed via new'); if (typeof e !== 'function') throw new TypeError('not a function'); this._state = 0, this._handled = !1, this._value = void 0, this._deferreds = [], d(e, this); } function n(r, o) { for (;r._state === 3;)r = r._value; r._state !== 0 ? (r._handled = !0, i._immediateFn(() => { const t = r._state === 1 ? o.onFulfilled : o.onRejected; if (t !== null) { let e; try { e = t(r._value); } catch (e) { return void a(o.promise, e); }s(o.promise, e); } else (r._state === 1 ? s : a)(o.promise, r._value); })) : r._deferreds.push(o); } function s(t, e) { try { if (e === t) throw new TypeError('A promise cannot be resolved with itself.'); if (e && (typeof e === 'object' || typeof e === 'function')) { const r = e.then; if (e instanceof i) return t._state = 3, t._value = e, c(t); if (typeof r === 'function') return d((o = r, n = e, function () { o.apply(n, arguments); }), t); }t._state = 1, t._value = e, c(t); } catch (e) { a(t, e); } let o; let n; } function a(e, t) { e._state = 2, e._value = t, c(e); } function c(r) { r._state === 2 && r._deferreds.length === 0 && i._immediateFn(() => { r._handled || i._unhandledRejectionFn(r._value); }); for (let e = 0, t = r._deferreds.length; t > e; e++)n(r, r._deferreds[e]); r._deferreds = null; } function d(e, t) { let r = !1; try { e((e) => { r || (r = !0, s(t, e)); }, (e) => { r || (r = !0, a(t, e)); }); } catch (e) { r || (r = !0, a(t, e)); } } const o = setTimeout; i.prototype.catch = function (e) { return this.then(null, e); }, i.prototype.then = function (o, e) { const t = new this.constructor(r); return n(this, new function (e, t, r) { this.onFulfilled = typeof o === 'function' ? o : null, this.onRejected = typeof t === 'function' ? t : null, this.promise = r; }(0, e, t)), t; }, i.prototype.finally = e, i.all = function (t) { return new i((n, i) => { if (!l(t)) return i(new TypeError('Promise.all accepts an array')); const s = Array.prototype.slice.call(t); if (s.length === 0) return n([]); for (var a = s.length, e = 0; s.length > e; e++)!(function t(r, e) { try { if (e && (typeof e === 'object' || typeof e === 'function')) { const o = e.then; if (typeof o === 'function') return o.call(e, (e) => { t(r, e); }, i); }s[r] = e, --a == 0 && n(s); } catch (e) { i(e); } }(e, s[e])); }); }, i.allSettled = t, i.resolve = function (t) { return t && typeof t === 'object' && t.constructor === i ? t : new i((e) => { e(t); }); }, i.reject = function (r) { return new i((e, t) => { t(r); }); }, i.race = function (n) { return new i((r, o) => { if (!l(n)) return o(new TypeError('Promise.race accepts an array')); for (let e = 0, t = n.length; t > e; e++)i.resolve(n[e]).then(r, o); }); }, i._immediateFn = typeof setImmediate === 'function' ? function (e) { setImmediate(e); } : function (e) { o(e, 0); }, i._unhandledRejectionFn = function (e) { void 0 !== console && console && console.warn('Possible Unhandled Promise Rejection:', e); }; const u = (function () { if (typeof self !== 'undefined') return self; if (typeof window !== 'undefined') return window; if (typeof global !== 'undefined') return global; throw Error('unable to locate global object'); }()); typeof u.Promise !== 'function' ? u.Promise = i : (u.Promise.prototype.finally || (u.Promise.prototype.finally = e), u.Promise.allSettled || (u.Promise.allSettled = t)); })); const pokemonRepository = (() => {
  const r = []; const n = document.querySelector('.pokemon-list'); const o = document.querySelector('.form-control'); async function e(e) { const t = e.detailsUrl; try { const r = await (await fetch(t)).json(); e.height = r.height, e.frontImgUrl = r.sprites.front_default, e.backImgUrl = r.sprites.back_default; const o = []; r.types.forEach((e) => { o.push(e.type.name); }), e.types = o.join(', '); } catch (e) { console.error(e); } } function i(e) { typeof e === 'object' && Object.keys(e).includes('name') && Object.keys(e).includes('detailsUrl') ? r.push(e) : console.error('Pokémon has to be added using this format: {name:, detailsUrl:}'); } function s() { const e = document.querySelector('.loading-message'); e.parentNode.removeChild(e); } function a(s) { e(s).then(() => { const e = document.querySelector('.modal-body'); var t = document.querySelector('.modal-title'); var t = (e.innerHTML = '', t.innerHTML = '', t.innerText = s.name, t.classList.add('modal-title'), document.createElement('p')); const r = (t.textContent = `Height: ${s.height}`, t.classList.add('modal-height'), document.createElement('img')); const o = (r.src = s.frontImgUrl, document.createElement('img')); const n = (o.src = s.backImgUrl, r.classList.add('modal-img'), o.classList.add('modal-img'), document.createElement('div')); const i = (n.classList.add('modal-text'), document.createElement('p')); i.textContent = `Types: ${s.types}`, i.classList.add('modal-types'), e.appendChild(r), e.appendChild(o), e.appendChild(n), n.appendChild(t), n.appendChild(i); }); } function l(o) { e(o).then(() => { const e = document.createElement('li'); const t = (e.classList.add('list-items'), e.classList.add('group-list-item'), document.createElement('button')); const r = (t.innerText = o.name, t.classList.add('button-class'), t.classList.add('btn'), t.setAttribute('data-toggle', 'modal'), t.setAttribute('data-target', '.modal'), document.createElement('img')); r.src = o.frontImgUrl, r.classList.add('button-pokemonImg'), t.addEventListener('click', () => { a(o), $('#exampleModalCenter').modal('show'); }), t.appendChild(r), e.appendChild(t), n.appendChild(e); }); } return o.addEventListener('input', () => { const t = o.value.toLowerCase(); const e = r.filter((e) => e.name.toLowerCase().includes(t)); n.innerHTML = '', e.forEach((e) => l(e)); }), {
    async fetchPokemonList() { let e; let t; (e = document.createElement('div')).classList.add('loading-message'), (t = document.querySelector('.form-inline')).parentNode.insertBefore(e, t); try { (await (await fetch('https://pokeapi.co/api/v2/pokemon/?limit=150')).json()).results.forEach((e) => { i({ name: e.name, detailsUrl: e.url }); }), s(); } catch (e) { console.error(e), s(); } }, addPokemon: i, fetchPokemonDetails: e, getPokemonList() { return r; }, showDetails: a, addPokemonToList: l,
  };
})(); pokemonRepository.fetchPokemonList().then(() => { pokemonRepository.getPokemonList().forEach((e) => { pokemonRepository.addPokemonToList(e); }); });
// # sourceMappingURL=data:application/json;charset=utf8;base64,

!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports):"function"==typeof define&&define.amd?define(["exports"],t):t(e.WHATWGFetch={})}(this,a=>{const l={searchParams:"URLSearchParams"in self,iterable:"Symbol"in self&&"iterator"in Symbol,blob:"FileReader"in self&&"Blob"in self&&function(){try{return new Blob,!0}catch(e){return!1}}(),formData:"FormData"in self,arrayBuffer:"ArrayBuffer"in self};if(l.arrayBuffer){const w=["[object Int8Array]","[object Uint8Array]","[object Uint8ClampedArray]","[object Int16Array]","[object Uint16Array]","[object Int32Array]","[object Uint32Array]","[object Float32Array]","[object Float64Array]"];var r=ArrayBuffer.isView||function(e){return e&&-1<w.indexOf(Object.prototype.toString.call(e))}}function o(e){if("string"!=typeof e&&(e=String(e)),/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(e))throw new TypeError("Invalid character in header field name");return e.toLowerCase()}function n(e){return e="string"!=typeof e?String(e):e}function e(t){const e={next(){var e=t.shift();return{done:void 0===e,value:e}}};return l.iterable&&(e[Symbol.iterator]=function(){return e}),e}function c(t){this.map={},t instanceof c?t.forEach(function(e,t){this.append(t,e)},this):Array.isArray(t)?t.forEach(function(e){this.append(e[0],e[1])},this):t&&Object.getOwnPropertyNames(t).forEach(function(e){this.append(e,t[e])},this)}function i(e){if(e.bodyUsed)return Promise.reject(new TypeError("Already read"));e.bodyUsed=!0}function s(r){return new Promise((e,t)=>{r.onload=function(){e(r.result)},r.onerror=function(){t(r.error)}})}function t(e){var t=new FileReader,r=s(t);return t.readAsArrayBuffer(e),r}function d(e){var t;return e.slice?e.slice(0):((t=new Uint8Array(e.byteLength)).set(new Uint8Array(e)),t.buffer)}function u(){return this.bodyUsed=!1,this._initBody=function(e){var t;(this._bodyInit=e)?"string"==typeof e?this._bodyText=e:l.blob&&Blob.prototype.isPrototypeOf(e)?this._bodyBlob=e:l.formData&&FormData.prototype.isPrototypeOf(e)?this._bodyFormData=e:l.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)?this._bodyText=e.toString():l.arrayBuffer&&l.blob&&(t=e)&&DataView.prototype.isPrototypeOf(t)?(this._bodyArrayBuffer=d(e.buffer),this._bodyInit=new Blob([this._bodyArrayBuffer])):l.arrayBuffer&&(ArrayBuffer.prototype.isPrototypeOf(e)||r(e))?this._bodyArrayBuffer=d(e):this._bodyText=e=Object.prototype.toString.call(e):this._bodyText="",this.headers.get("content-type")||("string"==typeof e?this.headers.set("content-type","text/plain;charset=UTF-8"):this._bodyBlob&&this._bodyBlob.type?this.headers.set("content-type",this._bodyBlob.type):l.searchParams&&URLSearchParams.prototype.isPrototypeOf(e)&&this.headers.set("content-type","application/x-www-form-urlencoded;charset=UTF-8"))},l.blob&&(this.blob=function(){var e=i(this);if(e)return e;if(this._bodyBlob)return Promise.resolve(this._bodyBlob);if(this._bodyArrayBuffer)return Promise.resolve(new Blob([this._bodyArrayBuffer]));if(this._bodyFormData)throw new Error("could not read FormData body as blob");return Promise.resolve(new Blob([this._bodyText]))},this.arrayBuffer=function(){return this._bodyArrayBuffer?i(this)||Promise.resolve(this._bodyArrayBuffer):this.blob().then(t)}),this.text=function(){var e,t,r=i(this);if(r)return r;if(this._bodyBlob)return r=this._bodyBlob,e=new FileReader,t=s(e),e.readAsText(r),t;if(this._bodyArrayBuffer)return Promise.resolve(function(e){var t=new Uint8Array(e),r=new Array(t.length);for(let e=0;e<t.length;e++)r[e]=String.fromCharCode(t[e]);return r.join("")}(this._bodyArrayBuffer));if(this._bodyFormData)throw new Error("could not read FormData body as text");return Promise.resolve(this._bodyText)},l.formData&&(this.formData=function(){return this.text().then(p)}),this.json=function(){return this.text().then(JSON.parse)},this}c.prototype.append=function(e,t){e=o(e),t=n(t);var r=this.map[e];this.map[e]=r?r+", "+t:t},c.prototype.delete=function(e){delete this.map[o(e)]},c.prototype.get=function(e){return e=o(e),this.has(e)?this.map[e]:null},c.prototype.has=function(e){return this.map.hasOwnProperty(o(e))},c.prototype.set=function(e,t){this.map[o(e)]=n(t)},c.prototype.forEach=function(e,t){for(const r in this.map)this.map.hasOwnProperty(r)&&e.call(t,this.map[r],r,this)},c.prototype.keys=function(){const r=[];return this.forEach((e,t)=>{r.push(t)}),e(r)},c.prototype.values=function(){const t=[];return this.forEach(e=>{t.push(e)}),e(t)},c.prototype.entries=function(){const r=[];return this.forEach((e,t)=>{r.push([t,e])}),e(r)},l.iterable&&(c.prototype[Symbol.iterator]=c.prototype.entries);const f=["DELETE","GET","HEAD","OPTIONS","POST","PUT"];function h(e,t){let r=(t=t||{})["body"];if(e instanceof h){if(e.bodyUsed)throw new TypeError("Already read");this.url=e.url,this.credentials=e.credentials,t.headers||(this.headers=new c(e.headers)),this.method=e.method,this.mode=e.mode,this.signal=e.signal,r||null==e._bodyInit||(r=e._bodyInit,e.bodyUsed=!0)}else this.url=String(e);var o;if(this.credentials=t.credentials||this.credentials||"same-origin",!t.headers&&this.headers||(this.headers=new c(t.headers)),this.method=(e=t.method||this.method||"GET",o=e.toUpperCase(),-1<f.indexOf(o)?o:e),this.mode=t.mode||this.mode||null,this.signal=t.signal||this.signal,this.referrer=null,("GET"===this.method||"HEAD"===this.method)&&r)throw new TypeError("Body not allowed for GET or HEAD requests");this._initBody(r)}function p(e){const r=new FormData;return e.trim().split("&").forEach(e=>{var t;e&&(t=(e=e.split("=")).shift().replace(/\+/g," "),e=e.join("=").replace(/\+/g," "),r.append(decodeURIComponent(t),decodeURIComponent(e)))}),r}function y(e,t){t=t||{},this.type="default",this.status=void 0===t.status?200:t.status,this.ok=200<=this.status&&this.status<300,this.statusText="statusText"in t?t.statusText:"OK",this.headers=new c(t.headers),this.url=t.url||"",this._initBody(e)}h.prototype.clone=function(){return new h(this,{body:this._bodyInit})},u.call(h.prototype),u.call(y.prototype),y.prototype.clone=function(){return new y(this._bodyInit,{status:this.status,statusText:this.statusText,headers:new c(this.headers),url:this.url})},y.error=function(){var e=new y(null,{status:0,statusText:""});return e.type="error",e};const m=[301,302,303,307,308];y.redirect=function(e,t){if(-1===m.indexOf(t))throw new RangeError("Invalid status code");return new y(null,{status:t,headers:{location:e}})},a.DOMException=self.DOMException;try{new a.DOMException}catch(e){a.DOMException=function(e,t){this.message=e,this.name=t;t=Error(e);this.stack=t.stack},a.DOMException.prototype=Object.create(Error.prototype),a.DOMException.prototype.constructor=a.DOMException}function b(i,s){return new Promise((r,e)=>{const t=new h(i,s);if(t.signal&&t.signal.aborted)return e(new a.DOMException("Aborted","AbortError"));const o=new XMLHttpRequest;function n(){o.abort()}o.onload=function(){var e={status:o.status,statusText:o.statusText,headers:function(e){const r=new c;return e.replace(/\r?\n[\t ]+/g," ").split(/\r?\n/).forEach(e=>{var e=e.split(":"),t=e.shift().trim();t&&(e=e.join(":").trim(),r.append(t,e))}),r}(o.getAllResponseHeaders()||"")},t=(e.url="responseURL"in o?o.responseURL:e.headers.get("X-Request-URL"),"response"in o?o.response:o.responseText);r(new y(t,e))},o.onerror=function(){e(new TypeError("Network request failed"))},o.ontimeout=function(){e(new TypeError("Network request failed"))},o.onabort=function(){e(new a.DOMException("Aborted","AbortError"))},o.open(t.method,t.url,!0),"include"===t.credentials?o.withCredentials=!0:"omit"===t.credentials&&(o.withCredentials=!1),"responseType"in o&&l.blob&&(o.responseType="blob"),t.headers.forEach((e,t)=>{o.setRequestHeader(t,e)}),t.signal&&(t.signal.addEventListener("abort",n),o.onreadystatechange=function(){4===o.readyState&&t.signal.removeEventListener("abort",n)}),o.send(void 0===t._bodyInit?null:t._bodyInit)})}b.polyfill=!0,self.fetch||(self.fetch=b,self.Headers=c,self.Request=h,self.Response=y),a.Headers=c,a.Request=h,a.Response=y,a.fetch=b,Object.defineProperty(a,"__esModule",{value:!0})}),function(e){("object"!=typeof exports||"undefined"==typeof module)&&"function"==typeof define&&define.amd?define(e):e()}(()=>{function e(t){const r=this.constructor;return this.then(e=>r.resolve(t()).then(()=>e),e=>r.resolve(t()).then(()=>r.reject(e)))}function t(r){return new this((n,e)=>{if(!r||void 0===r.length)return e(new TypeError(typeof r+` ${r} is not iterable(cannot read property Symbol(Symbol.iterator))`));var i=Array.prototype.slice.call(r);if(0===i.length)return n([]);for(var s=i.length,t=0;i.length>t;t++)!function t(r,e){if(e&&("object"==typeof e||"function"==typeof e)){var o=e.then;if("function"==typeof o)return o.call(e,e=>{t(r,e)},e=>{i[r]={status:"rejected",reason:e},0==--s&&n(i)})}i[r]={status:"fulfilled",value:e},0==--s&&n(i)}(t,i[t])})}function l(e){return e&&void 0!==e.length}function r(){}function i(e){if(!(this instanceof i))throw new TypeError("Promises must be constructed via new");if("function"!=typeof e)throw new TypeError("not a function");this._state=0,this._handled=!1,this._value=void 0,this._deferreds=[],d(e,this)}function n(r,o){for(;3===r._state;)r=r._value;0!==r._state?(r._handled=!0,i._immediateFn(()=>{var t=1===r._state?o.onFulfilled:o.onRejected;if(null!==t){let e;try{e=t(r._value)}catch(e){return void a(o.promise,e)}s(o.promise,e)}else(1===r._state?s:a)(o.promise,r._value)})):r._deferreds.push(o)}function s(t,e){try{if(e===t)throw new TypeError("A promise cannot be resolved with itself.");if(e&&("object"==typeof e||"function"==typeof e)){var r=e.then;if(e instanceof i)return t._state=3,t._value=e,c(t);if("function"==typeof r)return d((o=r,n=e,function(){o.apply(n,arguments)}),t)}t._state=1,t._value=e,c(t)}catch(e){a(t,e)}var o,n}function a(e,t){e._state=2,e._value=t,c(e)}function c(r){2===r._state&&0===r._deferreds.length&&i._immediateFn(()=>{r._handled||i._unhandledRejectionFn(r._value)});for(let e=0,t=r._deferreds.length;t>e;e++)n(r,r._deferreds[e]);r._deferreds=null}function d(e,t){let r=!1;try{e(e=>{r||(r=!0,s(t,e))},e=>{r||(r=!0,a(t,e))})}catch(e){r||(r=!0,a(t,e))}}const o=setTimeout;i.prototype.catch=function(e){return this.then(null,e)},i.prototype.then=function(o,e){var t=new this.constructor(r);return n(this,new function(e,t,r){this.onFulfilled="function"==typeof o?o:null,this.onRejected="function"==typeof t?t:null,this.promise=r}(0,e,t)),t},i.prototype.finally=e,i.all=function(t){return new i((n,i)=>{if(!l(t))return i(new TypeError("Promise.all accepts an array"));var s=Array.prototype.slice.call(t);if(0===s.length)return n([]);for(var a=s.length,e=0;s.length>e;e++)!function t(r,e){try{if(e&&("object"==typeof e||"function"==typeof e)){var o=e.then;if("function"==typeof o)return o.call(e,e=>{t(r,e)},i)}s[r]=e,0==--a&&n(s)}catch(e){i(e)}}(e,s[e])})},i.allSettled=t,i.resolve=function(t){return t&&"object"==typeof t&&t.constructor===i?t:new i(e=>{e(t)})},i.reject=function(r){return new i((e,t)=>{t(r)})},i.race=function(n){return new i((r,o)=>{if(!l(n))return o(new TypeError("Promise.race accepts an array"));for(let e=0,t=n.length;t>e;e++)i.resolve(n[e]).then(r,o)})},i._immediateFn="function"==typeof setImmediate?function(e){setImmediate(e)}:function(e){o(e,0)},i._unhandledRejectionFn=function(e){void 0!==console&&console&&console.warn("Possible Unhandled Promise Rejection:",e)};var u=function(){if("undefined"!=typeof self)return self;if("undefined"!=typeof window)return window;if("undefined"!=typeof global)return global;throw Error("unable to locate global object")}();"function"!=typeof u.Promise?u.Promise=i:(u.Promise.prototype.finally||(u.Promise.prototype.finally=e),u.Promise.allSettled||(u.Promise.allSettled=t))});const pokemonRepository=(()=>{const r=[],n=document.querySelector(".pokemon-list"),o=document.querySelector(".form-control");async function e(e){var t=e.detailsUrl;try{var r=await(await fetch(t)).json();e.height=r.height,e.frontImgUrl=r.sprites.front_default,e.backImgUrl=r.sprites.back_default;const o=[];r.types.forEach(e=>{o.push(e.type.name)}),e.types=o.join(", ")}catch(e){console.error(e)}}function i(e){"object"==typeof e&&Object.keys(e).includes("name")&&Object.keys(e).includes("detailsUrl")?r.push(e):console.error("Pokémon has to be added using this format: {name:, detailsUrl:}")}function s(){var e=document.querySelector(".loading-message");e.parentNode.removeChild(e)}function a(s){e(s).then(()=>{var e=document.querySelector(".modal-body"),t=document.querySelector(".modal-title"),t=(e.innerHTML="",t.innerHTML="",t.innerText=s.name,t.classList.add("modal-title"),document.createElement("p")),r=(t.textContent="Height: "+s.height,t.classList.add("modal-height"),document.createElement("img")),o=(r.src=s.frontImgUrl,document.createElement("img")),n=(o.src=s.backImgUrl,r.classList.add("modal-img"),o.classList.add("modal-img"),document.createElement("div")),i=(n.classList.add("modal-text"),document.createElement("p"));i.textContent="Types: "+s.types,i.classList.add("modal-types"),e.appendChild(r),e.appendChild(o),e.appendChild(n),n.appendChild(t),n.appendChild(i)})}var t=document.createElement("button"),l=(t.classList.add("btn","btn-arrow","arrow-left"),t.innerHTML='<i class="fa-solid fa-arrow-left"></i>',document.createElement("button")),c=(l.classList.add("btn","btn-arrow","arrow-right"),l.innerHTML='<i class="fa-solid fa-arrow-right"></i>',document.querySelector(".modal-content"));c.appendChild(t),c.appendChild(l);let d=0;function u(o){e(o).then(()=>{var e=document.createElement("li"),t=(e.classList.add("list-items"),e.classList.add("group-list-item"),document.createElement("button")),r=(t.innerText=o.name,t.classList.add("button-class"),t.classList.add("btn"),t.setAttribute("data-toggle","modal"),t.setAttribute("data-target",".modal"),document.createElement("img"));r.src=o.frontImgUrl,r.classList.add("button-pokemonImg"),t.addEventListener("click",()=>{a(o),document.querySelector(".modal fade").modal("show")}),t.appendChild(r),e.appendChild(t),n.appendChild(e)})}return t.addEventListener("click",()=>{var e=d;0<e&&(e--,d=e,a(pokemonRepository.getPokemonList()[d]))}),l.addEventListener("click",()=>{var e=pokemonRepository.getPokemonList(),t=d;t<e.length-1&&(t++,d=t,a(pokemonRepository.getPokemonList()[d]))}),o.addEventListener("input",()=>{const t=o.value.toLowerCase();var e=r.filter(e=>e.name.toLowerCase().includes(t));n.innerHTML="",e.forEach(e=>u(e))}),{fetchPokemonList:async function(){var e,t;(e=document.createElement("div")).classList.add("loading-message"),(t=document.querySelector(".form-inline"))["parentNode"].insertBefore(e,t);try{(await(await fetch("https://pokeapi.co/api/v2/pokemon/?limit=150")).json()).results.forEach(e=>{i({name:e.name,detailsUrl:e.url})}),s()}catch(e){console.error(e),s()}},addPokemon:i,fetchPokemonDetails:e,getPokemonList:function(){return r},showDetails:a,addPokemonToList:u}})();pokemonRepository.fetchPokemonList().then(()=>{pokemonRepository.getPokemonList().forEach(e=>{pokemonRepository.addPokemonToList(e)})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImZldGNoLXBvbHlmaWxsLmpzIiwicHJvbWlzZS1wb2x5ZmlsbC5qcyIsInNjcmlwdHMuanMiXSwibmFtZXMiOlsiZ2xvYmFsIiwiZmFjdG9yeSIsImV4cG9ydHMiLCJtb2R1bGUiLCJkZWZpbmUiLCJhbWQiLCJXSEFUV0dGZXRjaCIsInRoaXMiLCJzdXBwb3J0Iiwic2VhcmNoUGFyYW1zIiwic2VsZiIsIml0ZXJhYmxlIiwiU3ltYm9sIiwiYmxvYiIsIkJsb2IiLCJlIiwiZm9ybURhdGEiLCJhcnJheUJ1ZmZlciIsInZpZXdDbGFzc2VzIiwiaXNBcnJheUJ1ZmZlclZpZXciLCJBcnJheUJ1ZmZlciIsImlzVmlldyIsIm9iaiIsImluZGV4T2YiLCJPYmplY3QiLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsImNhbGwiLCJub3JtYWxpemVOYW1lIiwibmFtZSIsIlN0cmluZyIsInRlc3QiLCJUeXBlRXJyb3IiLCJ0b0xvd2VyQ2FzZSIsIm5vcm1hbGl6ZVZhbHVlIiwidmFsdWUiLCJpdGVyYXRvckZvciIsIml0ZW1zIiwiaXRlcmF0b3IiLCJuZXh0Iiwic2hpZnQiLCJkb25lIiwidW5kZWZpbmVkIiwiSGVhZGVycyIsImhlYWRlcnMiLCJtYXAiLCJmb3JFYWNoIiwiYXBwZW5kIiwiQXJyYXkiLCJpc0FycmF5IiwiaGVhZGVyIiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImNvbnN1bWVkIiwiYm9keSIsImJvZHlVc2VkIiwiUHJvbWlzZSIsInJlamVjdCIsImZpbGVSZWFkZXJSZWFkeSIsInJlYWRlciIsInJlc29sdmUiLCJvbmxvYWQiLCJyZXN1bHQiLCJvbmVycm9yIiwiZXJyb3IiLCJyZWFkQmxvYkFzQXJyYXlCdWZmZXIiLCJGaWxlUmVhZGVyIiwicHJvbWlzZSIsInJlYWRBc0FycmF5QnVmZmVyIiwiYnVmZmVyQ2xvbmUiLCJidWYiLCJ2aWV3Iiwic2xpY2UiLCJVaW50OEFycmF5IiwiYnl0ZUxlbmd0aCIsInNldCIsImJ1ZmZlciIsIkJvZHkiLCJfaW5pdEJvZHkiLCJfYm9keUluaXQiLCJfYm9keVRleHQiLCJpc1Byb3RvdHlwZU9mIiwiX2JvZHlCbG9iIiwiRm9ybURhdGEiLCJfYm9keUZvcm1EYXRhIiwiVVJMU2VhcmNoUGFyYW1zIiwiRGF0YVZpZXciLCJfYm9keUFycmF5QnVmZmVyIiwiZ2V0IiwidHlwZSIsInJlamVjdGVkIiwiRXJyb3IiLCJ0aGVuIiwidGV4dCIsInJlYWRBc1RleHQiLCJjaGFycyIsImxlbmd0aCIsImxldCIsImkiLCJmcm9tQ2hhckNvZGUiLCJqb2luIiwiZGVjb2RlIiwianNvbiIsIkpTT04iLCJwYXJzZSIsIm9sZFZhbHVlIiwiZGVsZXRlIiwiaGFzIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsYmFjayIsInRoaXNBcmciLCJrZXlzIiwicHVzaCIsInZhbHVlcyIsImVudHJpZXMiLCJtZXRob2RzIiwiUmVxdWVzdCIsImlucHV0Iiwib3B0aW9ucyIsInVybCIsImNyZWRlbnRpYWxzIiwibWV0aG9kIiwibW9kZSIsInNpZ25hbCIsInVwY2FzZWQiLCJ0b1VwcGVyQ2FzZSIsInJlZmVycmVyIiwiZm9ybSIsInRyaW0iLCJzcGxpdCIsImJ5dGVzIiwicmVwbGFjZSIsImRlY29kZVVSSUNvbXBvbmVudCIsIlJlc3BvbnNlIiwiYm9keUluaXQiLCJzdGF0dXMiLCJvayIsInN0YXR1c1RleHQiLCJjbG9uZSIsInJlc3BvbnNlIiwicmVkaXJlY3RTdGF0dXNlcyIsInJlZGlyZWN0IiwiUmFuZ2VFcnJvciIsImxvY2F0aW9uIiwiRE9NRXhjZXB0aW9uIiwiZXJyIiwibWVzc2FnZSIsInN0YWNrIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJmZXRjaCIsImluaXQiLCJyZXF1ZXN0IiwiYWJvcnRlZCIsInhociIsIlhNTEh0dHBSZXF1ZXN0IiwiYWJvcnRYaHIiLCJhYm9ydCIsInJhd0hlYWRlcnMiLCJwYXJ0cyIsImxpbmUiLCJrZXkiLCJnZXRBbGxSZXNwb25zZUhlYWRlcnMiLCJyZXNwb25zZVVSTCIsInJlc3BvbnNlVGV4dCIsIm9udGltZW91dCIsIm9uYWJvcnQiLCJvcGVuIiwid2l0aENyZWRlbnRpYWxzIiwicmVzcG9uc2VUeXBlIiwic2V0UmVxdWVzdEhlYWRlciIsImFkZEV2ZW50TGlzdGVuZXIiLCJvbnJlYWR5c3RhdGVjaGFuZ2UiLCJyZWFkeVN0YXRlIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInNlbmQiLCJwb2x5ZmlsbCIsImRlZmluZVByb3BlcnR5IiwidCIsIm4iLCJyIiwiZiIsIm8iLCJyZWFzb24iLCJfc3RhdGUiLCJfaGFuZGxlZCIsIl92YWx1ZSIsIl9kZWZlcnJlZHMiLCJsIiwiX2ltbWVkaWF0ZUZuIiwib25GdWxmaWxsZWQiLCJvblJlamVjdGVkIiwidSIsImMiLCJhcHBseSIsImFyZ3VtZW50cyIsIl91bmhhbmRsZWRSZWplY3Rpb25GbiIsImEiLCJzZXRUaW1lb3V0IiwiY2F0Y2giLCJmaW5hbGx5IiwiYWxsIiwiYWxsU2V0dGxlZCIsInJhY2UiLCJzZXRJbW1lZGlhdGUiLCJjb25zb2xlIiwid2FybiIsInMiLCJ3aW5kb3ciLCJwb2tlbW9uUmVwb3NpdG9yeSIsInBva2Vtb25MaXN0IiwicG9rZW1vbkxpc3RDb250YWluZXIiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJzZWFyY2hJbnB1dCIsImFzeW5jIiwiZmV0Y2hQb2tlbW9uRGV0YWlscyIsInBva2Vtb24iLCJkZXRhaWxzVXJsIiwiZGV0YWlscyIsImF3YWl0IiwiaGVpZ2h0IiwiZnJvbnRJbWdVcmwiLCJzcHJpdGVzIiwiZnJvbnRfZGVmYXVsdCIsImJhY2tJbWdVcmwiLCJiYWNrX2RlZmF1bHQiLCJwb2tlbW9uVHlwZUxpc3QiLCJ0eXBlcyIsIml0ZW0iLCJhZGRQb2tlbW9uIiwiaW5jbHVkZXMiLCJoaWRlTG9hZGluZ01lc3NhZ2UiLCJsb2FkaW5nTWVzc2FnZSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInNob3dEZXRhaWxzIiwibW9kYWxCb2R5IiwibW9kYWxUaXRsZSIsImlubmVySFRNTCIsImlubmVyVGV4dCIsImNsYXNzTGlzdCIsImFkZCIsImNyZWF0ZUVsZW1lbnQiLCJmcm9udEltZyIsInRleHRDb250ZW50IiwiYmFja0ltZyIsInNyYyIsIm1vZGFsVGV4dCIsImFwcGVuZENoaWxkIiwiYXJyb3dMZWZ0IiwiYXJyb3dSaWdodCIsIm1vZGFsQ29udGFpbmVyIiwiY3VycmVudFBva2Vtb25JbmRleCIsImFkZFBva2Vtb25Ub0xpc3QiLCJsaXN0SXRlbXMiLCJidXR0b24iLCJwb2tlbW9uSW1nIiwic2V0QXR0cmlidXRlIiwibW9kYWwiLCJuZXdJbmRleCIsImdldFBva2Vtb25MaXN0IiwibmV3UG9rZW1vbkxpc3QiLCJzZWFyY2hWYWx1ZSIsImZpbHRlcmVkUG9rZW1vbiIsImZpbHRlciIsImZldGNoUG9rZW1vbkxpc3QiLCJzZWFyY2hGb3JtIiwiaW5zZXJ0QmVmb3JlIiwicmVzdWx0cyJdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQSxTQUFBQSxFQUFBQyxHQUNBLFVBQUEsT0FBQUMsU0FBQSxhQUFBLE9BQUFDLE9BQUFGLEVBQUFDLE9BQUEsRUFDQSxZQUFBLE9BQUFFLFFBQUFBLE9BQUFDLElBQUFELE9BQUEsQ0FBQSxXQUFBSCxDQUFBLEVBQ0FBLEVBQUFELEVBQUFNLFlBQUEsRUFBQSxDQUNBLEVBQUFDLEtBQUEsSUFDQSxNQUFBQyxFQUFBLENBQ0FDLGFBQUEsb0JBQUFDLEtBQ0FDLFNBQUEsV0FBQUQsTUFBQSxhQUFBRSxPQUNBQyxLQUNBLGVBQUFILE1BQ0EsU0FBQUEsTUFDQSxXQUNBLElBRUEsT0FEQSxJQUFBSSxLQUNBLENBQUEsQ0FHQSxDQUZBLE1BQUFDLEdBQ0EsTUFBQSxDQUFBLENBQ0EsQ0FDQSxFQUFBLEVBQ0FDLFNBQUEsYUFBQU4sS0FDQU8sWUFBQSxnQkFBQVAsSUFDQSxFQU1BLEdBQUFGLEVBQUFTLFlBQUEsQ0FDQSxNQUFBQyxFQUFBLENBQ0EscUJBQ0Esc0JBQ0EsNkJBQ0Esc0JBQ0EsdUJBQ0Esc0JBQ0EsdUJBQ0Esd0JBQ0EseUJBR0EsSUFBQUMsRUFBQUMsWUFBQUMsUUFDQSxTQUFBQyxHQUNB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QUNBLEVBZ0RBRixXQUFBQSxFQUNBZCxvQkFBQUEsRUFDQTZDLGVBaERBLFdBRUEsT0FBQW5ELENBQ0EsRUE4Q0EwQixZQUFBQSxFQUNBa0IsaUJBQUFBLENBQ0EsQ0FDQSxHQUFBLEVBRUE3QyxrQkFBQXlELGlCQUFBLEVBQUE5SyxLQUFBLEtBQ0FxSCxrQkFBQW9ELGVBQUEsRUFDQXROLFFBQUEsSUFDQWtLLGtCQUFBNkMsaUJBQUFyQyxDQUFBLENBQ0EsQ0FBQSxDQUNBLENBQUEiLCJmaWxlIjoiYWxsLmpzIiwic291cmNlc0NvbnRlbnQiOlsiKGZ1bmN0aW9uIChnbG9iYWwsIGZhY3RvcnkpIHtcbiAgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gZmFjdG9yeShleHBvcnRzKVxuICAgIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKFsnZXhwb3J0cyddLCBmYWN0b3J5KVxuICAgICAgOiAoZmFjdG9yeSgoZ2xvYmFsLldIQVRXR0ZldGNoID0ge30pKSk7XG59KHRoaXMsICgoZXhwb3J0cykgPT4ge1xuICBjb25zdCBzdXBwb3J0ID0ge1xuICAgIHNlYXJjaFBhcmFtczogJ1VSTFNlYXJjaFBhcmFtcycgaW4gc2VsZixcbiAgICBpdGVyYWJsZTogJ1N5bWJvbCcgaW4gc2VsZiAmJiAnaXRlcmF0b3InIGluIFN5bWJvbCxcbiAgICBibG9iOlxuICAgICAgICAnRmlsZVJlYWRlcicgaW4gc2VsZlxuICAgICAgICAmJiAnQmxvYicgaW4gc2VsZlxuICAgICAgICAmJiAoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICBuZXcgQmxvYigpO1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgIH1cbiAgICAgICAgfSgpKSxcbiAgICBmb3JtRGF0YTogJ0Zvcm1EYXRhJyBpbiBzZWxmLFxuICAgIGFycmF5QnVmZmVyOiAnQXJyYXlCdWZmZXInIGluIHNlbGYsXG4gIH07XG5cbiAgZnVuY3Rpb24gaXNEYXRhVmlldyhvYmopIHtcbiAgICByZXR1cm4gb2JqICYmIERhdGFWaWV3LnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKG9iaik7XG4gIH1cblxuICBpZiAoc3VwcG9ydC5hcnJheUJ1ZmZlcikge1xuICAgIGNvbnN0IHZpZXdDbGFzc2VzID0gW1xuICAgICAgJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgICAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgICAgJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IFVpbnQzMkFycmF5XScsXG4gICAgICAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICAgICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIF07XG5cbiAgICB2YXIgaXNBcnJheUJ1ZmZlclZpZXcgPSBBcnJheUJ1ZmZlci5pc1ZpZXdcbiAgICAgICAgfHwgZnVuY3Rpb24gKG9iaikge1xuICAgICAgICAgIHJldHVybiBvYmogJiYgdmlld0NsYXNzZXMuaW5kZXhPZihPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSkgPiAtMTtcbiAgICAgICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU5hbWUobmFtZSkge1xuICAgIGlmICh0eXBlb2YgbmFtZSAhPT0gJ3N0cmluZycpIHtcbiAgICAgIG5hbWUgPSBTdHJpbmcobmFtZSk7XG4gICAgfVxuICAgIGlmICgvW15hLXowLTlcXC0jJCUmJyorLl5fYHx+XS9pLnRlc3QobmFtZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgY2hhcmFjdGVyIGluIGhlYWRlciBmaWVsZCBuYW1lJyk7XG4gICAgfVxuICAgIHJldHVybiBuYW1lLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVWYWx1ZSh2YWx1ZSkge1xuICAgIGlmICh0eXBlb2YgdmFsdWUgIT09ICdzdHJpbmcnKSB7XG4gICAgICB2YWx1ZSA9IFN0cmluZyh2YWx1ZSk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuXG4gIC8vIEJ1aWxkIGEgZGVzdHJ1Y3RpdmUgaXRlcmF0b3IgZm9yIHRoZSB2YWx1ZSBsaXN0XG4gIGZ1bmN0aW9uIGl0ZXJhdG9yRm9yKGl0ZW1zKSB7XG4gICAgY29uc3QgaXRlcmF0b3IgPSB7XG4gICAgICBuZXh0KCkge1xuICAgICAgICBjb25zdCB2YWx1ZSA9IGl0ZW1zLnNoaWZ0KCk7XG4gICAgICAgIHJldHVybiB7IGRvbmU6IHZhbHVlID09PSB1bmRlZmluZWQsIHZhbHVlIH07XG4gICAgICB9LFxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5pdGVyYWJsZSkge1xuICAgICAgaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIGl0ZXJhdG9yO1xuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4gaXRlcmF0b3I7XG4gIH1cblxuICBmdW5jdGlvbiBIZWFkZXJzKGhlYWRlcnMpIHtcbiAgICB0aGlzLm1hcCA9IHt9O1xuXG4gICAgaWYgKGhlYWRlcnMgaW5zdGFuY2VvZiBIZWFkZXJzKSB7XG4gICAgICBoZWFkZXJzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlLCBuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIHZhbHVlKTtcbiAgICAgIH0sIHRoaXMpO1xuICAgIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShoZWFkZXJzKSkge1xuICAgICAgaGVhZGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoZWFkZXIpIHtcbiAgICAgICAgdGhpcy5hcHBlbmQoaGVhZGVyWzBdLCBoZWFkZXJbMV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfSBlbHNlIGlmIChoZWFkZXJzKSB7XG4gICAgICBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhoZWFkZXJzKS5mb3JFYWNoKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgICAgIHRoaXMuYXBwZW5kKG5hbWUsIGhlYWRlcnNbbmFtZV0pO1xuICAgICAgfSwgdGhpcyk7XG4gICAgfVxuICB9XG5cbiAgSGVhZGVycy5wcm90b3R5cGUuYXBwZW5kID0gZnVuY3Rpb24gKG5hbWUsIHZhbHVlKSB7XG4gICAgbmFtZSA9IG5vcm1hbGl6ZU5hbWUobmFtZSk7XG4gICAgdmFsdWUgPSBub3JtYWxpemVWYWx1ZSh2YWx1ZSk7XG4gICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLm1hcFtuYW1lXTtcbiAgICB0aGlzLm1hcFtuYW1lXSA9IG9sZFZhbHVlID8gYCR7b2xkVmFsdWV9LCAke3ZhbHVlfWAgOiB2YWx1ZTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5kZWxldGUgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIGRlbGV0ZSB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5nZXQgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIG5hbWUgPSBub3JtYWxpemVOYW1lKG5hbWUpO1xuICAgIHJldHVybiB0aGlzLmhhcyhuYW1lKSA/IHRoaXMubWFwW25hbWVdIDogbnVsbDtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5oYXMgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiB0aGlzLm1hcC5oYXNPd25Qcm9wZXJ0eShub3JtYWxpemVOYW1lKG5hbWUpKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5zZXQgPSBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB0aGlzLm1hcFtub3JtYWxpemVOYW1lKG5hbWUpXSA9IG5vcm1hbGl6ZVZhbHVlKHZhbHVlKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5mb3JFYWNoID0gZnVuY3Rpb24gKGNhbGxiYWNrLCB0aGlzQXJnKSB7XG4gICAgZm9yIChjb25zdCBuYW1lIGluIHRoaXMubWFwKSB7XG4gICAgICBpZiAodGhpcy5tYXAuaGFzT3duUHJvcGVydHkobmFtZSkpIHtcbiAgICAgICAgY2FsbGJhY2suY2FsbCh0aGlzQXJnLCB0aGlzLm1hcFtuYW1lXSwgbmFtZSwgdGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIEhlYWRlcnMucHJvdG90eXBlLmtleXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgaXRlbXMgPSBbXTtcbiAgICB0aGlzLmZvckVhY2goKHZhbHVlLCBuYW1lKSA9PiB7XG4gICAgICBpdGVtcy5wdXNoKG5hbWUpO1xuICAgIH0pO1xuICAgIHJldHVybiBpdGVyYXRvckZvcihpdGVtcyk7XG4gIH07XG5cbiAgSGVhZGVycy5wcm90b3R5cGUudmFsdWVzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgaXRlbXMucHVzaCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGl0ZXJhdG9yRm9yKGl0ZW1zKTtcbiAgfTtcblxuICBIZWFkZXJzLnByb3RvdHlwZS5lbnRyaWVzID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGl0ZW1zID0gW107XG4gICAgdGhpcy5mb3JFYWNoKCh2YWx1ZSwgbmFtZSkgPT4ge1xuICAgICAgaXRlbXMucHVzaChbbmFtZSwgdmFsdWVdKTtcbiAgICB9KTtcbiAgICByZXR1cm4gaXRlcmF0b3JGb3IoaXRlbXMpO1xuICB9O1xuXG4gIGlmIChzdXBwb3J0Lml0ZXJhYmxlKSB7XG4gICAgSGVhZGVycy5wcm90b3R5cGVbU3ltYm9sLml0ZXJhdG9yXSA9IEhlYWRlcnMucHJvdG90eXBlLmVudHJpZXM7XG4gIH1cblxuICBmdW5jdGlvbiBjb25zdW1lZChib2R5KSB7XG4gICAgaWYgKGJvZHkuYm9keVVzZWQpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKCdBbHJlYWR5IHJlYWQnKSk7XG4gICAgfVxuICAgIGJvZHkuYm9keVVzZWQgPSB0cnVlO1xuICB9XG5cbiAgZnVuY3Rpb24gZmlsZVJlYWRlclJlYWR5KHJlYWRlcikge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICByZWFkZXIub25sb2FkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXNvbHZlKHJlYWRlci5yZXN1bHQpO1xuICAgICAgfTtcbiAgICAgIHJlYWRlci5vbmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QocmVhZGVyLmVycm9yKTtcbiAgICAgIH07XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiByZWFkQmxvYkFzQXJyYXlCdWZmZXIoYmxvYikge1xuICAgIGNvbnN0IHJlYWRlciA9IG5ldyBGaWxlUmVhZGVyKCk7XG4gICAgY29uc3QgcHJvbWlzZSA9IGZpbGVSZWFkZXJSZWFkeShyZWFkZXIpO1xuICAgIHJlYWRlci5yZWFkQXNBcnJheUJ1ZmZlcihibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRCbG9iQXNUZXh0KGJsb2IpIHtcbiAgICBjb25zdCByZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICAgIGNvbnN0IHByb21pc2UgPSBmaWxlUmVhZGVyUmVhZHkocmVhZGVyKTtcbiAgICByZWFkZXIucmVhZEFzVGV4dChibG9iKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlYWRBcnJheUJ1ZmZlckFzVGV4dChidWYpIHtcbiAgICBjb25zdCB2aWV3ID0gbmV3IFVpbnQ4QXJyYXkoYnVmKTtcbiAgICBjb25zdCBjaGFycyA9IG5ldyBBcnJheSh2aWV3Lmxlbmd0aCk7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZXcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNoYXJzW2ldID0gU3RyaW5nLmZyb21DaGFyQ29kZSh2aWV3W2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGNoYXJzLmpvaW4oJycpO1xuICB9XG5cbiAgZnVuY3Rpb24gYnVmZmVyQ2xvbmUoYnVmKSB7XG4gICAgaWYgKGJ1Zi5zbGljZSkge1xuICAgICAgcmV0dXJuIGJ1Zi5zbGljZSgwKTtcbiAgICB9XG4gICAgY29uc3QgdmlldyA9IG5ldyBVaW50OEFycmF5KGJ1Zi5ieXRlTGVuZ3RoKTtcbiAgICB2aWV3LnNldChuZXcgVWludDhBcnJheShidWYpKTtcbiAgICByZXR1cm4gdmlldy5idWZmZXI7XG4gIH1cblxuICBmdW5jdGlvbiBCb2R5KCkge1xuICAgIHRoaXMuYm9keVVzZWQgPSBmYWxzZTtcblxuICAgIHRoaXMuX2luaXRCb2R5ID0gZnVuY3Rpb24gKGJvZHkpIHtcbiAgICAgIHRoaXMuX2JvZHlJbml0ID0gYm9keTtcbiAgICAgIGlmICghYm9keSkge1xuICAgICAgICB0aGlzLl9ib2R5VGV4dCA9ICcnO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgYm9keSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdGhpcy5fYm9keVRleHQgPSBib2R5O1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmJsb2IgJiYgQmxvYi5wcm90b3R5cGUuaXNQcm90b3R5cGVPZihib2R5KSkge1xuICAgICAgICB0aGlzLl9ib2R5QmxvYiA9IGJvZHk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuZm9ybURhdGEgJiYgRm9ybURhdGEucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgdGhpcy5fYm9keUZvcm1EYXRhID0gYm9keTtcbiAgICAgIH0gZWxzZSBpZiAoc3VwcG9ydC5zZWFyY2hQYXJhbXMgJiYgVVJMU2VhcmNoUGFyYW1zLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keS50b1N0cmluZygpO1xuICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LmFycmF5QnVmZmVyICYmIHN1cHBvcnQuYmxvYiAmJiBpc0RhdGFWaWV3KGJvZHkpKSB7XG4gICAgICAgIHRoaXMuX2JvZHlBcnJheUJ1ZmZlciA9IGJ1ZmZlckNsb25lKGJvZHkuYnVmZmVyKTtcbiAgICAgICAgLy8gSUUgMTAtMTEgY2FuJ3QgaGFuZGxlIGEgRGF0YVZpZXcgYm9keS5cbiAgICAgICAgdGhpcy5fYm9keUluaXQgPSBuZXcgQmxvYihbdGhpcy5fYm9keUFycmF5QnVmZmVyXSk7XG4gICAgICB9IGVsc2UgaWYgKHN1cHBvcnQuYXJyYXlCdWZmZXIgJiYgKEFycmF5QnVmZmVyLnByb3RvdHlwZS5pc1Byb3RvdHlwZU9mKGJvZHkpIHx8IGlzQXJyYXlCdWZmZXJWaWV3KGJvZHkpKSkge1xuICAgICAgICB0aGlzLl9ib2R5QXJyYXlCdWZmZXIgPSBidWZmZXJDbG9uZShib2R5KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuX2JvZHlUZXh0ID0gYm9keSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChib2R5KTtcbiAgICAgIH1cblxuICAgICAgaWYgKCF0aGlzLmhlYWRlcnMuZ2V0KCdjb250ZW50LXR5cGUnKSkge1xuICAgICAgICBpZiAodHlwZW9mIGJvZHkgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgdGhpcy5oZWFkZXJzLnNldCgnY29udGVudC10eXBlJywgJ3RleHQvcGxhaW47Y2hhcnNldD1VVEYtOCcpO1xuICAgICAgICB9IGVsc2UgaWYgKHRoaXMuX2JvZHlCbG9iICYmIHRoaXMuX2JvZHlCbG9iLnR5cGUpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCB0aGlzLl9ib2R5QmxvYi50eXBlKTtcbiAgICAgICAgfSBlbHNlIGlmIChzdXBwb3J0LnNlYXJjaFBhcmFtcyAmJiBVUkxTZWFyY2hQYXJhbXMucHJvdG90eXBlLmlzUHJvdG90eXBlT2YoYm9keSkpIHtcbiAgICAgICAgICB0aGlzLmhlYWRlcnMuc2V0KCdjb250ZW50LXR5cGUnLCAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkO2NoYXJzZXQ9VVRGLTgnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAoc3VwcG9ydC5ibG9iKSB7XG4gICAgICB0aGlzLmJsb2IgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IHJlamVjdGVkID0gY29uc3VtZWQodGhpcyk7XG4gICAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICAgIHJldHVybiByZWplY3RlZDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUodGhpcy5fYm9keUJsb2IpO1xuICAgICAgICB9IGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKG5ldyBCbG9iKFt0aGlzLl9ib2R5QXJyYXlCdWZmZXJdKSk7XG4gICAgICAgIH0gaWYgKHRoaXMuX2JvZHlGb3JtRGF0YSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyBibG9iJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShuZXcgQmxvYihbdGhpcy5fYm9keVRleHRdKSk7XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHRoaXMuYXJyYXlCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLl9ib2R5QXJyYXlCdWZmZXIpIHtcbiAgICAgICAgICByZXR1cm4gY29uc3VtZWQodGhpcykgfHwgUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlBcnJheUJ1ZmZlcik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuYmxvYigpLnRoZW4ocmVhZEJsb2JBc0FycmF5QnVmZmVyKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgdGhpcy50ZXh0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgcmVqZWN0ZWQgPSBjb25zdW1lZCh0aGlzKTtcbiAgICAgIGlmIChyZWplY3RlZCkge1xuICAgICAgICByZXR1cm4gcmVqZWN0ZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLl9ib2R5QmxvYikge1xuICAgICAgICByZXR1cm4gcmVhZEJsb2JBc1RleHQodGhpcy5fYm9keUJsb2IpO1xuICAgICAgfSBpZiAodGhpcy5fYm9keUFycmF5QnVmZmVyKSB7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVhZEFycmF5QnVmZmVyQXNUZXh0KHRoaXMuX2JvZHlBcnJheUJ1ZmZlcikpO1xuICAgICAgfSBpZiAodGhpcy5fYm9keUZvcm1EYXRhKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignY291bGQgbm90IHJlYWQgRm9ybURhdGEgYm9keSBhcyB0ZXh0Jyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2JvZHlUZXh0KTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgaWYgKHN1cHBvcnQuZm9ybURhdGEpIHtcbiAgICAgIHRoaXMuZm9ybURhdGEgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKGRlY29kZSk7XG4gICAgICB9O1xuICAgIH1cblxuICAgIHRoaXMuanNvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLnRleHQoKS50aGVuKEpTT04ucGFyc2UpO1xuICAgIH07XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8vIEhUVFAgbWV0aG9kcyB3aG9zZSBjYXBpdGFsaXphdGlvbiBzaG91bGQgYmUgbm9ybWFsaXplZFxuICBjb25zdCBtZXRob2RzID0gWydERUxFVEUnLCAnR0VUJywgJ0hFQUQnLCAnT1BUSU9OUycsICdQT1NUJywgJ1BVVCddO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZU1ldGhvZChtZXRob2QpIHtcbiAgICBjb25zdCB1cGNhc2VkID0gbWV0aG9kLnRvVXBwZXJDYXNlKCk7XG4gICAgcmV0dXJuIG1ldGhvZHMuaW5kZXhPZih1cGNhc2VkKSA+IC0xID8gdXBjYXNlZCA6IG1ldGhvZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIFJlcXVlc3QoaW5wdXQsIG9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBsZXQgeyBib2R5IH0gPSBvcHRpb25zO1xuXG4gICAgaWYgKGlucHV0IGluc3RhbmNlb2YgUmVxdWVzdCkge1xuICAgICAgaWYgKGlucHV0LmJvZHlVc2VkKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FscmVhZHkgcmVhZCcpO1xuICAgICAgfVxuICAgICAgdGhpcy51cmwgPSBpbnB1dC51cmw7XG4gICAgICB0aGlzLmNyZWRlbnRpYWxzID0gaW5wdXQuY3JlZGVudGlhbHM7XG4gICAgICBpZiAoIW9wdGlvbnMuaGVhZGVycykge1xuICAgICAgICB0aGlzLmhlYWRlcnMgPSBuZXcgSGVhZGVycyhpbnB1dC5oZWFkZXJzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMubWV0aG9kID0gaW5wdXQubWV0aG9kO1xuICAgICAgdGhpcy5tb2RlID0gaW5wdXQubW9kZTtcbiAgICAgIHRoaXMuc2lnbmFsID0gaW5wdXQuc2lnbmFsO1xuICAgICAgaWYgKCFib2R5ICYmIGlucHV0Ll9ib2R5SW5pdCAhPSBudWxsKSB7XG4gICAgICAgIGJvZHkgPSBpbnB1dC5fYm9keUluaXQ7XG4gICAgICAgIGlucHV0LmJvZHlVc2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy51cmwgPSBTdHJpbmcoaW5wdXQpO1xuICAgIH1cblxuICAgIHRoaXMuY3JlZGVudGlhbHMgPSBvcHRpb25zLmNyZWRlbnRpYWxzIHx8IHRoaXMuY3JlZGVudGlhbHMgfHwgJ3NhbWUtb3JpZ2luJztcbiAgICBpZiAob3B0aW9ucy5oZWFkZXJzIHx8ICF0aGlzLmhlYWRlcnMpIHtcbiAgICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgfVxuICAgIHRoaXMubWV0aG9kID0gbm9ybWFsaXplTWV0aG9kKG9wdGlvbnMubWV0aG9kIHx8IHRoaXMubWV0aG9kIHx8ICdHRVQnKTtcbiAgICB0aGlzLm1vZGUgPSBvcHRpb25zLm1vZGUgfHwgdGhpcy5tb2RlIHx8IG51bGw7XG4gICAgdGhpcy5zaWduYWwgPSBvcHRpb25zLnNpZ25hbCB8fCB0aGlzLnNpZ25hbDtcbiAgICB0aGlzLnJlZmVycmVyID0gbnVsbDtcblxuICAgIGlmICgodGhpcy5tZXRob2QgPT09ICdHRVQnIHx8IHRoaXMubWV0aG9kID09PSAnSEVBRCcpICYmIGJvZHkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0JvZHkgbm90IGFsbG93ZWQgZm9yIEdFVCBvciBIRUFEIHJlcXVlc3RzJyk7XG4gICAgfVxuICAgIHRoaXMuX2luaXRCb2R5KGJvZHkpO1xuICB9XG5cbiAgUmVxdWVzdC5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZXF1ZXN0KHRoaXMsIHsgYm9keTogdGhpcy5fYm9keUluaXQgfSk7XG4gIH07XG5cbiAgZnVuY3Rpb24gZGVjb2RlKGJvZHkpIHtcbiAgICBjb25zdCBmb3JtID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgYm9keVxuICAgICAgLnRyaW0oKVxuICAgICAgLnNwbGl0KCcmJylcbiAgICAgIC5mb3JFYWNoKChieXRlcykgPT4ge1xuICAgICAgICBpZiAoYnl0ZXMpIHtcbiAgICAgICAgICBjb25zdCBzcGxpdCA9IGJ5dGVzLnNwbGl0KCc9Jyk7XG4gICAgICAgICAgY29uc3QgbmFtZSA9IHNwbGl0LnNoaWZ0KCkucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgY29uc3QgdmFsdWUgPSBzcGxpdC5qb2luKCc9JykucmVwbGFjZSgvXFwrL2csICcgJyk7XG4gICAgICAgICAgZm9ybS5hcHBlbmQoZGVjb2RlVVJJQ29tcG9uZW50KG5hbWUpLCBkZWNvZGVVUklDb21wb25lbnQodmFsdWUpKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgcmV0dXJuIGZvcm07XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhlYWRlcnMocmF3SGVhZGVycykge1xuICAgIGNvbnN0IGhlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuICAgIC8vIFJlcGxhY2UgaW5zdGFuY2VzIG9mIFxcclxcbiBhbmQgXFxuIGZvbGxvd2VkIGJ5IGF0IGxlYXN0IG9uZSBzcGFjZSBvciBob3Jpem9udGFsIHRhYiB3aXRoIGEgc3BhY2VcbiAgICAvLyBodHRwczovL3Rvb2xzLmlldGYub3JnL2h0bWwvcmZjNzIzMCNzZWN0aW9uLTMuMlxuICAgIGNvbnN0IHByZVByb2Nlc3NlZEhlYWRlcnMgPSByYXdIZWFkZXJzLnJlcGxhY2UoL1xccj9cXG5bXFx0IF0rL2csICcgJyk7XG4gICAgcHJlUHJvY2Vzc2VkSGVhZGVycy5zcGxpdCgvXFxyP1xcbi8pLmZvckVhY2goKGxpbmUpID0+IHtcbiAgICAgIGNvbnN0IHBhcnRzID0gbGluZS5zcGxpdCgnOicpO1xuICAgICAgY29uc3Qga2V5ID0gcGFydHMuc2hpZnQoKS50cmltKCk7XG4gICAgICBpZiAoa2V5KSB7XG4gICAgICAgIGNvbnN0IHZhbHVlID0gcGFydHMuam9pbignOicpLnRyaW0oKTtcbiAgICAgICAgaGVhZGVycy5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGhlYWRlcnM7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVxdWVzdC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIFJlc3BvbnNlKGJvZHlJbml0LCBvcHRpb25zKSB7XG4gICAgaWYgKCFvcHRpb25zKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdGhpcy50eXBlID0gJ2RlZmF1bHQnO1xuICAgIHRoaXMuc3RhdHVzID0gb3B0aW9ucy5zdGF0dXMgPT09IHVuZGVmaW5lZCA/IDIwMCA6IG9wdGlvbnMuc3RhdHVzO1xuICAgIHRoaXMub2sgPSB0aGlzLnN0YXR1cyA+PSAyMDAgJiYgdGhpcy5zdGF0dXMgPCAzMDA7XG4gICAgdGhpcy5zdGF0dXNUZXh0ID0gJ3N0YXR1c1RleHQnIGluIG9wdGlvbnMgPyBvcHRpb25zLnN0YXR1c1RleHQgOiAnT0snO1xuICAgIHRoaXMuaGVhZGVycyA9IG5ldyBIZWFkZXJzKG9wdGlvbnMuaGVhZGVycyk7XG4gICAgdGhpcy51cmwgPSBvcHRpb25zLnVybCB8fCAnJztcbiAgICB0aGlzLl9pbml0Qm9keShib2R5SW5pdCk7XG4gIH1cblxuICBCb2R5LmNhbGwoUmVzcG9uc2UucHJvdG90eXBlKTtcblxuICBSZXNwb25zZS5wcm90b3R5cGUuY2xvbmUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIG5ldyBSZXNwb25zZSh0aGlzLl9ib2R5SW5pdCwge1xuICAgICAgc3RhdHVzOiB0aGlzLnN0YXR1cyxcbiAgICAgIHN0YXR1c1RleHQ6IHRoaXMuc3RhdHVzVGV4dCxcbiAgICAgIGhlYWRlcnM6IG5ldyBIZWFkZXJzKHRoaXMuaGVhZGVycyksXG4gICAgICB1cmw6IHRoaXMudXJsLFxuICAgIH0pO1xuICB9O1xuXG4gIFJlc3BvbnNlLmVycm9yID0gZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gbmV3IFJlc3BvbnNlKG51bGwsIHsgc3RhdHVzOiAwLCBzdGF0dXNUZXh0OiAnJyB9KTtcbiAgICByZXNwb25zZS50eXBlID0gJ2Vycm9yJztcbiAgICByZXR1cm4gcmVzcG9uc2U7XG4gIH07XG5cbiAgY29uc3QgcmVkaXJlY3RTdGF0dXNlcyA9IFszMDEsIDMwMiwgMzAzLCAzMDcsIDMwOF07XG5cbiAgUmVzcG9uc2UucmVkaXJlY3QgPSBmdW5jdGlvbiAodXJsLCBzdGF0dXMpIHtcbiAgICBpZiAocmVkaXJlY3RTdGF0dXNlcy5pbmRleE9mKHN0YXR1cykgPT09IC0xKSB7XG4gICAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCBzdGF0dXMgY29kZScpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgUmVzcG9uc2UobnVsbCwgeyBzdGF0dXMsIGhlYWRlcnM6IHsgbG9jYXRpb246IHVybCB9IH0pO1xuICB9O1xuXG4gIGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gc2VsZi5ET01FeGNlcHRpb247XG4gIHRyeSB7XG4gICAgbmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uID0gZnVuY3Rpb24gKG1lc3NhZ2UsIG5hbWUpIHtcbiAgICAgIHRoaXMubWVzc2FnZSA9IG1lc3NhZ2U7XG4gICAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgICAgY29uc3QgZXJyb3IgPSBFcnJvcihtZXNzYWdlKTtcbiAgICAgIHRoaXMuc3RhY2sgPSBlcnJvci5zdGFjaztcbiAgICB9O1xuICAgIGV4cG9ydHMuRE9NRXhjZXB0aW9uLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcbiAgICBleHBvcnRzLkRPTUV4Y2VwdGlvbi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBleHBvcnRzLkRPTUV4Y2VwdGlvbjtcbiAgfVxuXG4gIGZ1bmN0aW9uIGZldGNoKGlucHV0LCBpbml0KSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICAgIGNvbnN0IHJlcXVlc3QgPSBuZXcgUmVxdWVzdChpbnB1dCwgaW5pdCk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCAmJiByZXF1ZXN0LnNpZ25hbC5hYm9ydGVkKSB7XG4gICAgICAgIHJldHVybiByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCgpO1xuXG4gICAgICBmdW5jdGlvbiBhYm9ydFhocigpIHtcbiAgICAgICAgeGhyLmFib3J0KCk7XG4gICAgICB9XG5cbiAgICAgIHhoci5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgICAgc3RhdHVzOiB4aHIuc3RhdHVzLFxuICAgICAgICAgIHN0YXR1c1RleHQ6IHhoci5zdGF0dXNUZXh0LFxuICAgICAgICAgIGhlYWRlcnM6IHBhcnNlSGVhZGVycyh4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKCkgfHwgJycpLFxuICAgICAgICB9O1xuICAgICAgICBvcHRpb25zLnVybCA9ICdyZXNwb25zZVVSTCcgaW4geGhyID8geGhyLnJlc3BvbnNlVVJMIDogb3B0aW9ucy5oZWFkZXJzLmdldCgnWC1SZXF1ZXN0LVVSTCcpO1xuICAgICAgICBjb25zdCBib2R5ID0gJ3Jlc3BvbnNlJyBpbiB4aHIgPyB4aHIucmVzcG9uc2UgOiB4aHIucmVzcG9uc2VUZXh0O1xuICAgICAgICByZXNvbHZlKG5ldyBSZXNwb25zZShib2R5LCBvcHRpb25zKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub25lcnJvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmVqZWN0KG5ldyBUeXBlRXJyb3IoJ05ldHdvcmsgcmVxdWVzdCBmYWlsZWQnKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub250aW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QobmV3IFR5cGVFcnJvcignTmV0d29yayByZXF1ZXN0IGZhaWxlZCcpKTtcbiAgICAgIH07XG5cbiAgICAgIHhoci5vbmFib3J0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZWplY3QobmV3IGV4cG9ydHMuRE9NRXhjZXB0aW9uKCdBYm9ydGVkJywgJ0Fib3J0RXJyb3InKSk7XG4gICAgICB9O1xuXG4gICAgICB4aHIub3BlbihyZXF1ZXN0Lm1ldGhvZCwgcmVxdWVzdC51cmwsIHRydWUpO1xuXG4gICAgICBpZiAocmVxdWVzdC5jcmVkZW50aWFscyA9PT0gJ2luY2x1ZGUnKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgfSBlbHNlIGlmIChyZXF1ZXN0LmNyZWRlbnRpYWxzID09PSAnb21pdCcpIHtcbiAgICAgICAgeGhyLndpdGhDcmVkZW50aWFscyA9IGZhbHNlO1xuICAgICAgfVxuXG4gICAgICBpZiAoJ3Jlc3BvbnNlVHlwZScgaW4geGhyICYmIHN1cHBvcnQuYmxvYikge1xuICAgICAgICB4aHIucmVzcG9uc2VUeXBlID0gJ2Jsb2InO1xuICAgICAgfVxuXG4gICAgICByZXF1ZXN0LmhlYWRlcnMuZm9yRWFjaCgodmFsdWUsIG5hbWUpID0+IHtcbiAgICAgICAgeGhyLnNldFJlcXVlc3RIZWFkZXIobmFtZSwgdmFsdWUpO1xuICAgICAgfSk7XG5cbiAgICAgIGlmIChyZXF1ZXN0LnNpZ25hbCkge1xuICAgICAgICByZXF1ZXN0LnNpZ25hbC5hZGRFdmVudExpc3RlbmVyKCdhYm9ydCcsIGFib3J0WGhyKTtcblxuICAgICAgICB4aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgIC8vIERPTkUgKHN1Y2Nlc3Mgb3IgZmFpbHVyZSlcbiAgICAgICAgICBpZiAoeGhyLnJlYWR5U3RhdGUgPT09IDQpIHtcbiAgICAgICAgICAgIHJlcXVlc3Quc2lnbmFsLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2Fib3J0JywgYWJvcnRYaHIpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cblxuICAgICAgeGhyLnNlbmQodHlwZW9mIHJlcXVlc3QuX2JvZHlJbml0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXF1ZXN0Ll9ib2R5SW5pdCk7XG4gICAgfSk7XG4gIH1cblxuICBmZXRjaC5wb2x5ZmlsbCA9IHRydWU7XG5cbiAgaWYgKCFzZWxmLmZldGNoKSB7XG4gICAgc2VsZi5mZXRjaCA9IGZldGNoO1xuICAgIHNlbGYuSGVhZGVycyA9IEhlYWRlcnM7XG4gICAgc2VsZi5SZXF1ZXN0ID0gUmVxdWVzdDtcbiAgICBzZWxmLlJlc3BvbnNlID0gUmVzcG9uc2U7XG4gIH1cblxuICBleHBvcnRzLkhlYWRlcnMgPSBIZWFkZXJzO1xuICBleHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuICBleHBvcnRzLlJlc3BvbnNlID0gUmVzcG9uc2U7XG4gIGV4cG9ydHMuZmV0Y2ggPSBmZXRjaDtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xufSkpKTtcbiIsIiEoZnVuY3Rpb24gKGUsIHQpIHsgdHlwZW9mIGV4cG9ydHMgPT09ICdvYmplY3QnICYmIHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnID8gdCgpIDogdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKHQpIDogdCgpOyB9KDAsICgpID0+IHtcbiAgZnVuY3Rpb24gZShlKSB7IGNvbnN0IHQgPSB0aGlzLmNvbnN0cnVjdG9yOyByZXR1cm4gdGhpcy50aGVuKChuKSA9PiB0LnJlc29sdmUoZSgpKS50aGVuKCgpID0+IG4pLCAobikgPT4gdC5yZXNvbHZlKGUoKSkudGhlbigoKSA9PiB0LnJlamVjdChuKSkpOyB9IGZ1bmN0aW9uIHQoZSkgeyByZXR1cm4gbmV3IHRoaXMoKHQsIG4pID0+IHsgZnVuY3Rpb24gbyhlLCBuKSB7IGlmIChuICYmICh0eXBlb2YgbiA9PT0gJ29iamVjdCcgfHwgdHlwZW9mIG4gPT09ICdmdW5jdGlvbicpKSB7IGNvbnN0IGYgPSBuLnRoZW47IGlmICh0eXBlb2YgZiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIHZvaWQgZi5jYWxsKG4sICh0KSA9PiB7IG8oZSwgdCk7IH0sIChuKSA9PiB7IHJbZV0gPSB7IHN0YXR1czogJ3JlamVjdGVkJywgcmVhc29uOiBuIH0sIC0taSA9PSAwICYmIHQocik7IH0pOyB9cltlXSA9IHsgc3RhdHVzOiAnZnVsZmlsbGVkJywgdmFsdWU6IG4gfSwgLS1pID09IDAgJiYgdChyKTsgfSBpZiAoIWUgfHwgdHlwZW9mIGUubGVuZ3RoID09PSAndW5kZWZpbmVkJykgcmV0dXJuIG4obmV3IFR5cGVFcnJvcihgJHt0eXBlb2YgZX0gJHtlfSBpcyBub3QgaXRlcmFibGUoY2Fubm90IHJlYWQgcHJvcGVydHkgU3ltYm9sKFN5bWJvbC5pdGVyYXRvcikpYCkpOyB2YXIgciA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGUpOyBpZiAoci5sZW5ndGggPT09IDApIHJldHVybiB0KFtdKTsgZm9yICh2YXIgaSA9IHIubGVuZ3RoLCBmID0gMDsgci5sZW5ndGggPiBmOyBmKyspbyhmLCByW2ZdKTsgfSk7IH0gZnVuY3Rpb24gbihlKSB7IHJldHVybiAhKCFlIHx8IHR5cGVvZiBlLmxlbmd0aCA9PT0gJ3VuZGVmaW5lZCcpOyB9IGZ1bmN0aW9uIG8oKSB7fSBmdW5jdGlvbiByKGUpIHsgaWYgKCEodGhpcyBpbnN0YW5jZW9mIHIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdQcm9taXNlcyBtdXN0IGJlIGNvbnN0cnVjdGVkIHZpYSBuZXcnKTsgaWYgKHR5cGVvZiBlICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdub3QgYSBmdW5jdGlvbicpOyB0aGlzLl9zdGF0ZSA9IDAsIHRoaXMuX2hhbmRsZWQgPSAhMSwgdGhpcy5fdmFsdWUgPSB1bmRlZmluZWQsIHRoaXMuX2RlZmVycmVkcyA9IFtdLCBsKGUsIHRoaXMpOyB9IGZ1bmN0aW9uIGkoZSwgdCkgeyBmb3IgKDtlLl9zdGF0ZSA9PT0gMzspZSA9IGUuX3ZhbHVlOyBlLl9zdGF0ZSAhPT0gMCA/IChlLl9oYW5kbGVkID0gITAsIHIuX2ltbWVkaWF0ZUZuKCgpID0+IHsgY29uc3QgbiA9IGUuX3N0YXRlID09PSAxID8gdC5vbkZ1bGZpbGxlZCA6IHQub25SZWplY3RlZDsgaWYgKG4gIT09IG51bGwpIHsgbGV0IG87IHRyeSB7IG8gPSBuKGUuX3ZhbHVlKTsgfSBjYXRjaCAocikgeyByZXR1cm4gdm9pZCB1KHQucHJvbWlzZSwgcik7IH1mKHQucHJvbWlzZSwgbyk7IH0gZWxzZSAoZS5fc3RhdGUgPT09IDEgPyBmIDogdSkodC5wcm9taXNlLCBlLl92YWx1ZSk7IH0pKSA6IGUuX2RlZmVycmVkcy5wdXNoKHQpOyB9IGZ1bmN0aW9uIGYoZSwgdCkgeyB0cnkgeyBpZiAodCA9PT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignQSBwcm9taXNlIGNhbm5vdCBiZSByZXNvbHZlZCB3aXRoIGl0c2VsZi4nKTsgaWYgKHQgJiYgKHR5cGVvZiB0ID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdCA9PT0gJ2Z1bmN0aW9uJykpIHsgY29uc3QgbiA9IHQudGhlbjsgaWYgKHQgaW5zdGFuY2VvZiByKSByZXR1cm4gZS5fc3RhdGUgPSAzLCBlLl92YWx1ZSA9IHQsIHZvaWQgYyhlKTsgaWYgKHR5cGVvZiBuID09PSAnZnVuY3Rpb24nKSByZXR1cm4gdm9pZCBsKChmdW5jdGlvbiAoZSwgdCkgeyByZXR1cm4gZnVuY3Rpb24gKCkgeyBlLmFwcGx5KHQsIGFyZ3VtZW50cyk7IH07IH0obiwgdCkpLCBlKTsgfWUuX3N0YXRlID0gMSwgZS5fdmFsdWUgPSB0LCBjKGUpOyB9IGNhdGNoIChvKSB7IHUoZSwgbyk7IH0gfSBmdW5jdGlvbiB1KGUsIHQpIHsgZS5fc3RhdGUgPSAyLCBlLl92YWx1ZSA9IHQsIGMoZSk7IH0gZnVuY3Rpb24gYyhlKSB7IGUuX3N0YXRlID09PSAyICYmIGUuX2RlZmVycmVkcy5sZW5ndGggPT09IDAgJiYgci5faW1tZWRpYXRlRm4oKCkgPT4geyBlLl9oYW5kbGVkIHx8IHIuX3VuaGFuZGxlZFJlamVjdGlvbkZuKGUuX3ZhbHVlKTsgfSk7IGZvciAobGV0IHQgPSAwLCBuID0gZS5fZGVmZXJyZWRzLmxlbmd0aDsgbiA+IHQ7IHQrKylpKGUsIGUuX2RlZmVycmVkc1t0XSk7IGUuX2RlZmVycmVkcyA9IG51bGw7IH0gZnVuY3Rpb24gbChlLCB0KSB7IGxldCBuID0gITE7IHRyeSB7IGUoKGUpID0+IHsgbiB8fCAobiA9ICEwLCBmKHQsIGUpKTsgfSwgKGUpID0+IHsgbiB8fCAobiA9ICEwLCB1KHQsIGUpKTsgfSk7IH0gY2F0Y2ggKG8pIHsgaWYgKG4pIHJldHVybjsgbiA9ICEwLCB1KHQsIG8pOyB9IH0gY29uc3QgYSA9IHNldFRpbWVvdXQ7IHIucHJvdG90eXBlLmNhdGNoID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRoaXMudGhlbihudWxsLCBlKTsgfSwgci5wcm90b3R5cGUudGhlbiA9IGZ1bmN0aW9uIChlLCB0KSB7IGNvbnN0IG4gPSBuZXcgdGhpcy5jb25zdHJ1Y3RvcihvKTsgcmV0dXJuIGkodGhpcywgbmV3IGZ1bmN0aW9uIChlLCB0LCBuKSB7IHRoaXMub25GdWxmaWxsZWQgPSB0eXBlb2YgZSA9PT0gJ2Z1bmN0aW9uJyA/IGUgOiBudWxsLCB0aGlzLm9uUmVqZWN0ZWQgPSB0eXBlb2YgdCA9PT0gJ2Z1bmN0aW9uJyA/IHQgOiBudWxsLCB0aGlzLnByb21pc2UgPSBuOyB9KGUsIHQsIG4pKSwgbjsgfSwgci5wcm90b3R5cGUuZmluYWxseSA9IGUsIHIuYWxsID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG5ldyByKCh0LCBvKSA9PiB7IGZ1bmN0aW9uIHIoZSwgbikgeyB0cnkgeyBpZiAobiAmJiAodHlwZW9mIG4gPT09ICdvYmplY3QnIHx8IHR5cGVvZiBuID09PSAnZnVuY3Rpb24nKSkgeyBjb25zdCB1ID0gbi50aGVuOyBpZiAodHlwZW9mIHUgPT09ICdmdW5jdGlvbicpIHJldHVybiB2b2lkIHUuY2FsbChuLCAodCkgPT4geyByKGUsIHQpOyB9LCBvKTsgfWlbZV0gPSBuLCAtLWYgPT0gMCAmJiB0KGkpOyB9IGNhdGNoIChjKSB7IG8oYyk7IH0gfSBpZiAoIW4oZSkpIHJldHVybiBvKG5ldyBUeXBlRXJyb3IoJ1Byb21pc2UuYWxsIGFjY2VwdHMgYW4gYXJyYXknKSk7IHZhciBpID0gQXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoZSk7IGlmIChpLmxlbmd0aCA9PT0gMCkgcmV0dXJuIHQoW10pOyBmb3IgKHZhciBmID0gaS5sZW5ndGgsIHUgPSAwOyBpLmxlbmd0aCA+IHU7IHUrKylyKHUsIGlbdV0pOyB9KTsgfSwgci5hbGxTZXR0bGVkID0gdCwgci5yZXNvbHZlID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGUgJiYgdHlwZW9mIGUgPT09ICdvYmplY3QnICYmIGUuY29uc3RydWN0b3IgPT09IHIgPyBlIDogbmV3IHIoKHQpID0+IHsgdChlKTsgfSk7IH0sIHIucmVqZWN0ID0gZnVuY3Rpb24gKGUpIHsgcmV0dXJuIG5ldyByKCh0LCBuKSA9PiB7IG4oZSk7IH0pOyB9LCByLnJhY2UgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gbmV3IHIoKHQsIG8pID0+IHsgaWYgKCFuKGUpKSByZXR1cm4gbyhuZXcgVHlwZUVycm9yKCdQcm9taXNlLnJhY2UgYWNjZXB0cyBhbiBhcnJheScpKTsgZm9yIChsZXQgaSA9IDAsIGYgPSBlLmxlbmd0aDsgZiA+IGk7IGkrKylyLnJlc29sdmUoZVtpXSkudGhlbih0LCBvKTsgfSk7IH0sIHIuX2ltbWVkaWF0ZUZuID0gdHlwZW9mIHNldEltbWVkaWF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiBmdW5jdGlvbiAoZSkgeyBzZXRJbW1lZGlhdGUoZSk7IH0gfHwgZnVuY3Rpb24gKGUpIHsgYShlLCAwKTsgfSwgci5fdW5oYW5kbGVkUmVqZWN0aW9uRm4gPSBmdW5jdGlvbiAoZSkgeyB2b2lkIDAgIT09IGNvbnNvbGUgJiYgY29uc29sZSAmJiBjb25zb2xlLndhcm4oJ1Bvc3NpYmxlIFVuaGFuZGxlZCBQcm9taXNlIFJlamVjdGlvbjonLCBlKTsgfTsgY29uc3QgcyA9IChmdW5jdGlvbiAoKSB7IGlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiBzZWxmOyBpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcpIHJldHVybiB3aW5kb3c7IGlmICh0eXBlb2YgZ2xvYmFsICE9PSAndW5kZWZpbmVkJykgcmV0dXJuIGdsb2JhbDsgdGhyb3cgRXJyb3IoJ3VuYWJsZSB0byBsb2NhdGUgZ2xvYmFsIG9iamVjdCcpOyB9KCkpOyB0eXBlb2Ygcy5Qcm9taXNlICE9PSAnZnVuY3Rpb24nID8gcy5Qcm9taXNlID0gciA6IChzLlByb21pc2UucHJvdG90eXBlLmZpbmFsbHkgfHwgKHMuUHJvbWlzZS5wcm90b3R5cGUuZmluYWxseSA9IGUpLCBzLlByb21pc2UuYWxsU2V0dGxlZCB8fCAocy5Qcm9taXNlLmFsbFNldHRsZWQgPSB0KSk7XG59KSk7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBuby1wbHVzcGx1cyAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tY29uc29sZSAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tcGFyYW0tcmVhc3NpZ24gKi9cbmNvbnN0IHBva2Vtb25SZXBvc2l0b3J5ID0gKCgpID0+IHtcbiAgY29uc3QgcG9rZW1vbkxpc3QgPSBbXTtcbiAgY29uc3QgcG9rZW1vbkFwaVVybCA9ICdodHRwczovL3Bva2VhcGkuY28vYXBpL3YyL3Bva2Vtb24vP2xpbWl0PTE1MCc7XG4gIGNvbnN0IHBva2Vtb25MaXN0Q29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBva2Vtb24tbGlzdCcpOyAvLyBzZWxlY3RpbmcgZGl2IGZyb20gaHRtbFxuICBjb25zdCBzZWFyY2hJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtLWNvbnRyb2wnKTtcblxuICBhc3luYyBmdW5jdGlvbiBmZXRjaFBva2Vtb25EZXRhaWxzKHBva2Vtb24pIHtcbiAgICBjb25zdCB1cmwgPSBwb2tlbW9uLmRldGFpbHNVcmw7XG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsKTsgLy8gZ2V0cyBhIHByb21pc2UgZnJvbSBkZXRhaWxzVXJsXG4gICAgICBjb25zdCBkZXRhaWxzID0gYXdhaXQgcmVzcG9uc2UuanNvbigpOyAvLyB0dXJucyB0aGUgcmVzcG9uc2UgaW50byBhIGpzb24gY2FsbGVkIGRldGFpbHNcbiAgICAgIHBva2Vtb24uaGVpZ2h0ID0gZGV0YWlscy5oZWlnaHQ7XG4gICAgICBwb2tlbW9uLmZyb250SW1nVXJsID0gZGV0YWlscy5zcHJpdGVzLmZyb250X2RlZmF1bHQ7XG4gICAgICBwb2tlbW9uLmJhY2tJbWdVcmwgPSBkZXRhaWxzLnNwcml0ZXMuYmFja19kZWZhdWx0O1xuXG4gICAgICBjb25zdCBwb2tlbW9uVHlwZUxpc3QgPSBbXTtcblxuICAgICAgZGV0YWlscy50eXBlcy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIC8vIGl0ZXJhdGluZyBvdmVyIHRoZSBkZXRhaWxzLnR5cGVzXG4gICAgICAgIHBva2Vtb25UeXBlTGlzdC5wdXNoKGl0ZW0udHlwZS5uYW1lKTsgLy8gcHVzaGluZyB0aGUgaXRlbXMgaW50byBwb2tlbW9uVHlwZUxpc3RcbiAgICAgIH0pO1xuICAgICAgcG9rZW1vbi50eXBlcyA9IHBva2Vtb25UeXBlTGlzdC5qb2luKCcsICcpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkUG9rZW1vbihwb2tlbW9uKSB7XG4gICAgLy8gZnVuY3Rpb24gZ3JhYnMgdGhlIHBva2Vtb25hcGlcbiAgICBpZiAoXG4gICAgICB0eXBlb2YgcG9rZW1vbiA9PT0gJ29iamVjdCcgJiZcbiAgICAgIE9iamVjdC5rZXlzKHBva2Vtb24pLmluY2x1ZGVzKCduYW1lJykgJiZcbiAgICAgIE9iamVjdC5rZXlzKHBva2Vtb24pLmluY2x1ZGVzKCdkZXRhaWxzVXJsJylcbiAgICApIHtcbiAgICAgIHBva2Vtb25MaXN0LnB1c2gocG9rZW1vbik7IC8vIGlmIHNvIHB1c2ggcG9rZW1vbiB0byB0aGUgcG9rZW1vbkxpc3QgYXJyYXlcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5lcnJvcihcbiAgICAgICAgJ1Bva8OpbW9uIGhhcyB0byBiZSBhZGRlZCB1c2luZyB0aGlzIGZvcm1hdDoge25hbWU6LCBkZXRhaWxzVXJsOn0nXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHNob3dMb2FkaW5nTWVzc2FnZSgpIHtcbiAgICBjb25zdCBsb2FkaW5nTWVzc2FnZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpOyAvLyB0aGlzIGlzIGNyZWF0aW5nIGFuIGVsZW1lbnQgJ3AnXG4gICAgbG9hZGluZ01lc3NhZ2UuY2xhc3NMaXN0LmFkZCgnbG9hZGluZy1tZXNzYWdlJyk7IC8vIGNyZWF0ZXMgYSBjbGFzc2xpc3QuIGNhbGwgPT4gJy5sb2FkaW5nLW1lc3NhZ2UnXG5cbiAgICBjb25zdCBzZWFyY2hGb3JtID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm0taW5saW5lJyk7XG4gICAgY29uc3QgeyBwYXJlbnROb2RlIH0gPSBzZWFyY2hGb3JtO1xuXG4gICAgcGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUobG9hZGluZ01lc3NhZ2UsIHNlYXJjaEZvcm0pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGlkZUxvYWRpbmdNZXNzYWdlKCkge1xuICAgIGNvbnN0IGxvYWRpbmdNZXNzYWdlID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmxvYWRpbmctbWVzc2FnZScpOyAvLyB0aGlzIGlzIHNlbGVjdGluZyB0aGUgbG9hZGluZ01lc3NhZ2UgZWxlbWVudFxuICAgIGxvYWRpbmdNZXNzYWdlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQobG9hZGluZ01lc3NhZ2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gc2hvd0RldGFpbHMocG9rZW1vbikge1xuICAgIGZldGNoUG9rZW1vbkRldGFpbHMocG9rZW1vbikudGhlbigoKSA9PiB7XG4gICAgICAvLyBmZXRjaFBva2Vtb25EZXRhaWxzIGdldHMgY2FsbGVkIGluXG4gICAgICBjb25zdCBtb2RhbEJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcubW9kYWwtYm9keScpO1xuICAgICAgY29uc3QgbW9kYWxUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbC10aXRsZScpO1xuXG4gICAgICBtb2RhbEJvZHkuaW5uZXJIVE1MID0gJyc7XG4gICAgICBtb2RhbFRpdGxlLmlubmVySFRNTCA9ICcnO1xuXG4gICAgICBtb2RhbFRpdGxlLmlubmVyVGV4dCA9IHBva2Vtb24ubmFtZTtcbiAgICAgIG1vZGFsVGl0bGUuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdGl0bGUnKTtcblxuICAgICAgY29uc3QgaGVpZ2h0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpOyAvLyBjcmVhdGluZyBhbiBlbGVtZW50IGZvciB0aGUgcG9rZW1vbi5oZWlnaHRcbiAgICAgIGhlaWdodC50ZXh0Q29udGVudCA9IGBIZWlnaHQ6ICR7cG9rZW1vbi5oZWlnaHR9YDtcbiAgICAgIGhlaWdodC5jbGFzc0xpc3QuYWRkKCdtb2RhbC1oZWlnaHQnKTtcblxuICAgICAgY29uc3QgZnJvbnRJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTsgLy8gY3JlYXRpbmcgaW1nIGVsZW1lbnRzIGZvciB0aGUgcG9rZW1vblxuICAgICAgZnJvbnRJbWcuc3JjID0gcG9rZW1vbi5mcm9udEltZ1VybDtcbiAgICAgIGNvbnN0IGJhY2tJbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgIGJhY2tJbWcuc3JjID0gcG9rZW1vbi5iYWNrSW1nVXJsO1xuICAgICAgZnJvbnRJbWcuY2xhc3NMaXN0LmFkZCgnbW9kYWwtaW1nJyk7XG4gICAgICBiYWNrSW1nLmNsYXNzTGlzdC5hZGQoJ21vZGFsLWltZycpO1xuXG4gICAgICBjb25zdCBtb2RhbFRleHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIG1vZGFsVGV4dC5jbGFzc0xpc3QuYWRkKCdtb2RhbC10ZXh0Jyk7XG5cbiAgICAgIGNvbnN0IHR5cGVzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xuICAgICAgdHlwZXMudGV4dENvbnRlbnQgPSBgVHlwZXM6ICR7cG9rZW1vbi50eXBlc31gO1xuICAgICAgdHlwZXMuY2xhc3NMaXN0LmFkZCgnbW9kYWwtdHlwZXMnKTtcblxuICAgICAgbW9kYWxCb2R5LmFwcGVuZENoaWxkKGZyb250SW1nKTtcbiAgICAgIG1vZGFsQm9keS5hcHBlbmRDaGlsZChiYWNrSW1nKTtcbiAgICAgIG1vZGFsQm9keS5hcHBlbmRDaGlsZChtb2RhbFRleHQpO1xuICAgICAgbW9kYWxUZXh0LmFwcGVuZENoaWxkKGhlaWdodCk7XG4gICAgICBtb2RhbFRleHQuYXBwZW5kQ2hpbGQodHlwZXMpO1xuICAgIH0pO1xuICB9XG5cbiAgLy8gT3V0c2lkZSB0aGUgc2hvd0RldGFpbHMgZnVuY3Rpb24sIGNyZWF0ZSB0aGUgYXJyb3cgYnV0dG9ucyBhbmQgYWRkIGV2ZW50IGxpc3RlbmVyc1xuICBjb25zdCBhcnJvd0xlZnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYXJyb3dMZWZ0LmNsYXNzTGlzdC5hZGQoJ2J0bicsICdidG4tYXJyb3cnLCAnYXJyb3ctbGVmdCcpO1xuICBhcnJvd0xlZnQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtYXJyb3ctbGVmdFwiPjwvaT4nO1xuXG4gIGNvbnN0IGFycm93UmlnaHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTtcbiAgYXJyb3dSaWdodC5jbGFzc0xpc3QuYWRkKCdidG4nLCAnYnRuLWFycm93JywgJ2Fycm93LXJpZ2h0Jyk7XG4gIGFycm93UmlnaHQuaW5uZXJIVE1MID0gJzxpIGNsYXNzPVwiZmEtc29saWQgZmEtYXJyb3ctcmlnaHRcIj48L2k+JztcblxuICAvLyBHZXQgdGhlIG1vZGFsIGNvbnRhaW5lciBhbmQgYXBwZW5kIHRoZSBhcnJvdyBidXR0b25zIHRvIGl0XG4gIGNvbnN0IG1vZGFsQ29udGFpbmVyID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLm1vZGFsLWNvbnRlbnQnKTtcbiAgbW9kYWxDb250YWluZXIuYXBwZW5kQ2hpbGQoYXJyb3dMZWZ0KTtcbiAgbW9kYWxDb250YWluZXIuYXBwZW5kQ2hpbGQoYXJyb3dSaWdodCk7XG5cbiAgbGV0IGN1cnJlbnRQb2tlbW9uSW5kZXggPSAwOyAvLyBTZXQgdGhlIGluaXRpYWwgaW5kZXggdG8gMFxuXG4gIC8vIEFkZCBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIGFycm93IGJ1dHRvbnMgb3V0c2lkZSB0aGUgc2hvd0RldGFpbHMgZnVuY3Rpb25cbiAgYXJyb3dMZWZ0LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIGxldCBuZXdJbmRleCA9IGN1cnJlbnRQb2tlbW9uSW5kZXg7XG4gICAgaWYgKG5ld0luZGV4ID4gMCkge1xuICAgICAgbmV3SW5kZXgtLTtcbiAgICAgIGN1cnJlbnRQb2tlbW9uSW5kZXggPSBuZXdJbmRleDtcbiAgICAgIHNob3dEZXRhaWxzKHBva2Vtb25SZXBvc2l0b3J5LmdldFBva2Vtb25MaXN0KClbY3VycmVudFBva2Vtb25JbmRleF0pO1xuICAgIH1cbiAgfSk7XG5cbiAgYXJyb3dSaWdodC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICBjb25zdCBuZXdQb2tlbW9uTGlzdCA9IHBva2Vtb25SZXBvc2l0b3J5LmdldFBva2Vtb25MaXN0KCk7XG4gICAgbGV0IG5ld0luZGV4ID0gY3VycmVudFBva2Vtb25JbmRleDtcbiAgICBpZiAobmV3SW5kZXggPCBuZXdQb2tlbW9uTGlzdC5sZW5ndGggLSAxKSB7XG4gICAgICBuZXdJbmRleCsrO1xuICAgICAgY3VycmVudFBva2Vtb25JbmRleCA9IG5ld0luZGV4O1xuICAgICAgc2hvd0RldGFpbHMocG9rZW1vblJlcG9zaXRvcnkuZ2V0UG9rZW1vbkxpc3QoKVtjdXJyZW50UG9rZW1vbkluZGV4XSk7XG4gICAgfVxuICB9KTtcblxuICBhc3luYyBmdW5jdGlvbiBmZXRjaFBva2Vtb25MaXN0KCkge1xuICAgIHNob3dMb2FkaW5nTWVzc2FnZSgpO1xuICAgIHRyeSB7XG4gICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IGZldGNoKHBva2Vtb25BcGlVcmwpOyAvLyBnZXRzIGEgcHJvbWlzZSBmcm9tIHBva2Vtb25BcGlVcmxcbiAgICAgIGNvbnN0IGpzb24gPSBhd2FpdCByZXNwb25zZS5qc29uKCk7IC8vIHJlc3BvbnNlIGlzIHRoZW4gY2FsbGVkIHdpdGggLmpzb24oKSBtZXRob2RcbiAgICAgIGpzb24ucmVzdWx0cy5mb3JFYWNoKChpdGVtKSA9PiB7XG4gICAgICAgIC8vIGl0ZXJhdGVzIG92ZXIgdGhlIHJlc3VsdHMgb2YgdGhlIGpzb25cbiAgICAgICAgY29uc3QgcG9rZW1vbiA9IHtcbiAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgZGV0YWlsc1VybDogaXRlbS51cmwsXG4gICAgICAgIH07XG4gICAgICAgIGFkZFBva2Vtb24ocG9rZW1vbik7XG4gICAgICB9KTtcbiAgICAgIGhpZGVMb2FkaW5nTWVzc2FnZSgpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICBoaWRlTG9hZGluZ01lc3NhZ2UoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRQb2tlbW9uTGlzdCgpIHtcbiAgICAvLyBnZXRQb2tlbW9uTGlzdCBmdW5jdGlvbiB3aWxsIHJldHVybiB0aGUgYXJyYXkgcG9rZW1vbkxpc3RcbiAgICByZXR1cm4gcG9rZW1vbkxpc3Q7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRQb2tlbW9uVG9MaXN0KHBva2Vtb24pIHtcbiAgICBmZXRjaFBva2Vtb25EZXRhaWxzKHBva2Vtb24pLnRoZW4oKCkgPT4ge1xuICAgICAgLy8gbXVzdCBsb2FkIHBva2Vtb25kZXRhaWxzIHRvIGxvYWQgaW1nVXJsIG9udG8gYnV0dG9uXG4gICAgICBjb25zdCBsaXN0SXRlbXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdsaScpOyAvLyBjcmVhdGluZyBsaSBlbGVtZW50XG4gICAgICBsaXN0SXRlbXMuY2xhc3NMaXN0LmFkZCgnbGlzdC1pdGVtcycpO1xuICAgICAgbGlzdEl0ZW1zLmNsYXNzTGlzdC5hZGQoJ2dyb3VwLWxpc3QtaXRlbScpO1xuXG4gICAgICBjb25zdCBidXR0b24gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdidXR0b24nKTsgLy8gY3JlYXRpbmcgYnV0dG9uIGVsZW1lbnRcbiAgICAgIGJ1dHRvbi5pbm5lclRleHQgPSBwb2tlbW9uLm5hbWU7IC8vIGJ1dHRvbiBoYXMgcG9rZW1vbi5uYW1lXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYnV0dG9uLWNsYXNzJyk7IC8vIGFkZGVkIGEgY2xhc3MgdG8gYnV0dG9uXG4gICAgICBidXR0b24uY2xhc3NMaXN0LmFkZCgnYnRuJyk7XG4gICAgICBidXR0b24uc2V0QXR0cmlidXRlKCdkYXRhLXRvZ2dsZScsICdtb2RhbCcpO1xuICAgICAgYnV0dG9uLnNldEF0dHJpYnV0ZSgnZGF0YS10YXJnZXQnLCAnLm1vZGFsJyk7XG5cbiAgICAgIGNvbnN0IHBva2Vtb25JbWcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdpbWcnKTtcbiAgICAgIHBva2Vtb25JbWcuc3JjID0gcG9rZW1vbi5mcm9udEltZ1VybDtcbiAgICAgIHBva2Vtb25JbWcuY2xhc3NMaXN0LmFkZCgnYnV0dG9uLXBva2Vtb25JbWcnKTtcblxuICAgICAgYnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgICAgICAvLyB3aGVuIGJ1dHRvbiBpcyBjbGlja2VkIHRoZSBzaG93RGV0YWlscygpIGlzIGludm9rZWRcbiAgICAgICAgc2hvd0RldGFpbHMocG9rZW1vbik7XG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5tb2RhbCBmYWRlJykubW9kYWwoJ3Nob3cnKTtcbiAgICAgIH0pO1xuXG4gICAgICBidXR0b24uYXBwZW5kQ2hpbGQocG9rZW1vbkltZyk7XG4gICAgICBsaXN0SXRlbXMuYXBwZW5kQ2hpbGQoYnV0dG9uKTtcbiAgICAgIHBva2Vtb25MaXN0Q29udGFpbmVyLmFwcGVuZENoaWxkKGxpc3RJdGVtcyk7XG4gICAgfSk7XG4gIH1cblxuICBzZWFyY2hJbnB1dC5hZGRFdmVudExpc3RlbmVyKCdpbnB1dCcsICgpID0+IHtcbiAgICBjb25zdCBzZWFyY2hWYWx1ZSA9IHNlYXJjaElucHV0LnZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgY29uc3QgZmlsdGVyZWRQb2tlbW9uID0gcG9rZW1vbkxpc3QuZmlsdGVyKChwb2tlbW9uKSA9PlxuICAgICAgcG9rZW1vbi5uYW1lLnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoc2VhcmNoVmFsdWUpXG4gICAgKTtcbiAgICBwb2tlbW9uTGlzdENvbnRhaW5lci5pbm5lckhUTUwgPSAnJztcbiAgICBmaWx0ZXJlZFBva2Vtb24uZm9yRWFjaCgocG9rZW1vbikgPT4gYWRkUG9rZW1vblRvTGlzdChwb2tlbW9uKSk7XG4gIH0pO1xuXG4gIHJldHVybiB7XG4gICAgZmV0Y2hQb2tlbW9uTGlzdCxcbiAgICBhZGRQb2tlbW9uLFxuICAgIGZldGNoUG9rZW1vbkRldGFpbHMsXG4gICAgZ2V0UG9rZW1vbkxpc3QsXG4gICAgc2hvd0RldGFpbHMsXG4gICAgYWRkUG9rZW1vblRvTGlzdCxcbiAgfTtcbn0pKCk7XG5cbnBva2Vtb25SZXBvc2l0b3J5LmZldGNoUG9rZW1vbkxpc3QoKS50aGVuKCgpID0+IHtcbiAgY29uc3QgYWxscG9rZW1vbiA9IHBva2Vtb25SZXBvc2l0b3J5LmdldFBva2Vtb25MaXN0KCk7XG4gIGFsbHBva2Vtb24uZm9yRWFjaCgocG9rZW1vbikgPT4ge1xuICAgIHBva2Vtb25SZXBvc2l0b3J5LmFkZFBva2Vtb25Ub0xpc3QocG9rZW1vbik7XG4gIH0pO1xufSk7XG4iXX0=
